{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"map-container\"\n};\nconst _hoisted_2 = {\n  class: \"search-container\"\n};\nconst _hoisted_3 = {\n  class: \"suggestion-item\"\n};\nconst _hoisted_4 = {\n  class: \"name\"\n};\nconst _hoisted_5 = {\n  class: \"id\"\n};\nconst _hoisted_6 = {\n  class: \"suggestion-item\"\n};\nconst _hoisted_7 = {\n  class: \"name\"\n};\nconst _hoisted_8 = {\n  class: \"id\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_autocomplete = _resolveComponent(\"el-autocomplete\");\n  const _component_el_col = _resolveComponent(\"el-col\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 搜索控件容器 \"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_el_row, {\n    gutter: 20\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\" 起点搜索框，使用自动完成组件 \"), _createVNode(_component_el_autocomplete, {\n        modelValue: $data.startPoint,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.startPoint = $event),\n        \"fetch-suggestions\": $options.querySearchAsync,\n        placeholder: \"请输入起点\",\n        clearable: \"\",\n        class: \"full-width\",\n        \"trigger-on-focus\": false,\n        onSelect: $options.handleStartSelect\n      }, {\n        default: _withCtx(({\n          item\n        }) => [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_5, \"ID: \" + _toDisplayString(item.nodeId), 1 /* TEXT */)])]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\" 终点搜索框，使用自动完成组件 \"), _createVNode(_component_el_autocomplete, {\n        modelValue: $data.endPoint,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.endPoint = $event),\n        \"fetch-suggestions\": $options.querySearchAsync,\n        placeholder: \"请输入终点\",\n        clearable: \"\",\n        class: \"full-width\",\n        \"trigger-on-focus\": false,\n        onSelect: $options.handleEndSelect\n      }, {\n        default: _withCtx(({\n          item\n        }) => [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, \"ID: \" + _toDisplayString(item.nodeId), 1 /* TEXT */)])]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 6\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.searchRoute,\n        loading: $data.loading\n      }, {\n        default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\" 查找路线 \")])),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\", \"loading\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]), _createCommentVNode(\" 地图容器 \"), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    id: \"map\",\n    class: \"map-view\"\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_createVNode","_component_el_row","gutter","default","_withCtx","_component_el_col","span","_component_el_autocomplete","modelValue","$data","startPoint","_cache","$event","$options","querySearchAsync","placeholder","clearable","onSelect","handleStartSelect","item","_hoisted_3","_hoisted_4","_toDisplayString","name","_hoisted_5","nodeId","_","endPoint","handleEndSelect","_hoisted_6","_hoisted_7","_hoisted_8","_component_el_button","type","onClick","searchRoute","loading","_createTextVNode","id"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapview.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 搜索控件容器 -->\r\n    <div class=\"search-container\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"9\">\r\n          <!-- 起点搜索框，使用自动完成组件 -->\r\n          <el-autocomplete\r\n              v-model=\"startPoint\"\r\n              :fetch-suggestions=\"querySearchAsync\"\r\n              placeholder=\"请输入起点\"\r\n              clearable\r\n              class=\"full-width\"\r\n              :trigger-on-focus=\"false\"\r\n              @select=\"handleStartSelect\"\r\n          >\r\n            <template #default=\"{ item }\">\r\n              <div class=\"suggestion-item\">\r\n                <div class=\"name\">{{ item.name }}</div>\r\n                <div class=\"id\">ID: {{ item.nodeId }}</div>\r\n              </div>\r\n            </template>\r\n          </el-autocomplete>\r\n        </el-col>\r\n        <el-col :span=\"9\">\r\n          <!-- 终点搜索框，使用自动完成组件 -->\r\n          <el-autocomplete\r\n              v-model=\"endPoint\"\r\n              :fetch-suggestions=\"querySearchAsync\"\r\n              placeholder=\"请输入终点\"\r\n              clearable\r\n              class=\"full-width\"\r\n              :trigger-on-focus=\"false\"\r\n              @select=\"handleEndSelect\"\r\n          >\r\n            <template #default=\"{ item }\">\r\n              <div class=\"suggestion-item\">\r\n                <div class=\"name\">{{ item.name }}</div>\r\n                <div class=\"id\">ID: {{ item.nodeId }}</div>\r\n              </div>\r\n            </template>\r\n          </el-autocomplete>\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-button type=\"primary\" @click=\"searchRoute\" :loading=\"loading\">\r\n            查找路线\r\n          </el-button>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n\r\n    <!-- 地图容器 -->\r\n    <div id=\"map\" class=\"map-view\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { ElMessage } from 'element-plus';\r\nimport 'element-plus/dist/index.css';\r\n\r\nexport default {\r\n  name: 'MapView',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      startPoint: '',              // 起点搜索文本\r\n      endPoint: '',                // 终点搜索文本\r\n      startMarker: null,           // 起点标记\r\n      endMarker: null,            // 终点标记\r\n      routePath: null,            // 路径线\r\n      tileLayer: null,            // 底图图层\r\n      selectedStartId: null,       // 选中的起点ID\r\n      selectedEndId: null,         // 选中的终点ID\r\n      loading: false,              // 加载状态\r\n      searchTimeout: null,         // 搜索延时器\r\n      bounds: {                    // 地图边界\r\n        minLat: 28.2817100,\r\n        minLon: 117.1911600,\r\n        maxLat: 28.3225200,\r\n        maxLon: 117.2551900\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    // 初始化地图\r\n    initMap() {\r\n      const centerLat = (this.bounds.minLat + this.bounds.maxLat) / 2;\r\n      const centerLon = (this.bounds.minLon + this.bounds.maxLon) / 2;\r\n\r\n      this.map = L.map('map', {\r\n        center: [centerLat, centerLon],\r\n        zoom: 15,\r\n        minZoom: 14,\r\n        maxZoom: 18,\r\n        zoomControl: true,\r\n        doubleClickZoom: true,\r\n        scrollWheelZoom: true\r\n      });\r\n\r\n      // 添加 OSM 底图\r\n      this.tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '© OpenStreetMap contributors',\r\n        maxZoom: 18,\r\n        tileSize: 256\r\n      }).addTo(this.map);\r\n\r\n      // 设置地图边界\r\n      const bounds = L.latLngBounds(\r\n          [this.bounds.minLat, this.bounds.minLon],\r\n          [this.bounds.maxLat, this.bounds.maxLon]\r\n      );\r\n      this.map.setMaxBounds(bounds);\r\n\r\n      // 添加比例尺\r\n      L.control.scale({ imperial: false }).addTo(this.map);\r\n    },\r\n\r\n    // 处理地点搜索的方法\r\n    async querySearchAsync(queryString, callback) {\r\n      // 如果搜索字符串为空，不执行搜索\r\n      if (!queryString) {\r\n        callback([]);\r\n        return;\r\n      }\r\n\r\n      // 使用节流控制搜索频率\r\n      if (this.searchTimeout) {\r\n        clearTimeout(this.searchTimeout);\r\n      }\r\n\r\n      this.searchTimeout = setTimeout(async () => {\r\n        try {\r\n          const response = await fetch('http://localhost:18080/search', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              query: queryString\r\n            })\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error('搜索请求失败');\r\n          }\r\n\r\n          const data = await response.json();\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error('搜索错误:', error);\r\n          ElMessage.error('地点搜索失败');\r\n          callback([]);\r\n        }\r\n      }, 300); // 300ms 的节流延迟\r\n    },\r\n\r\n    // 处理起点选择\r\n    handleStartSelect(item) {\r\n      this.selectedStartId = item.nodeId;\r\n      // 清除旧的起点标记\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      // 添加新的起点标记\r\n      this.startMarker = L.marker([item.lat, item.lon])\r\n          .addTo(this.map)\r\n          .bindPopup(`起点：${item.name}`)\r\n          .openPopup();\r\n\r\n      // 平滑移动到选中位置\r\n      this.map.flyTo([item.lat, item.lon], 16);\r\n    },\r\n\r\n    // 处理终点选择\r\n    handleEndSelect(item) {\r\n      this.selectedEndId = item.nodeId;\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      this.endMarker = L.marker([item.lat, item.lon])\r\n          .addTo(this.map)\r\n          .bindPopup(`终点：${item.name}`)\r\n          .openPopup();\r\n\r\n      this.map.flyTo([item.lat, item.lon], 16);\r\n    },\r\n\r\n    // 搜索路径\r\n    async searchRoute() {\r\n      if (!this.selectedStartId || !this.selectedEndId) {\r\n        ElMessage.warning('请从搜索结果中选择起点和终点');\r\n        return;\r\n      }\r\n\r\n      this.loading = true;\r\n      try {\r\n        const response = await fetch('http://localhost:18080/route', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            start_id: this.selectedStartId,\r\n            end_id: this.selectedEndId\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('路径查找失败');\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // 清除现有路径\r\n        this.clearMap();\r\n\r\n        if (data.path && data.path.length > 0) {\r\n          // 绘制新路径\r\n          this.routePath = L.polyline(data.path, {\r\n            color: '#3388ff',\r\n            weight: 6,\r\n            opacity: 0.8,\r\n            lineJoin: 'round'\r\n          }).addTo(this.map);\r\n\r\n          // 重新添加起终点标记\r\n          this.startMarker = L.marker(data.path[0]).addTo(this.map)\r\n              .bindPopup('起点').openPopup();\r\n          this.endMarker = L.marker(data.path[data.path.length - 1]).addTo(this.map)\r\n              .bindPopup('终点');\r\n\r\n          // 调整视野以显示完整路径\r\n          this.map.fitBounds(this.routePath.getBounds(), {\r\n            padding: [50, 50]\r\n          });\r\n\r\n          ElMessage.success('路径已显示');\r\n        } else {\r\n          ElMessage.warning('未找到可行路径');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        ElMessage.error('路径查找失败，请重试');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    // 清除地图上的标记和路径\r\n    clearMap() {\r\n      if (this.startMarker) this.map.removeLayer(this.startMarker);\r\n      if (this.endMarker) this.map.removeLayer(this.endMarker);\r\n      if (this.routePath) this.map.removeLayer(this.routePath);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.map-container {\r\n  position: relative;\r\n  height: 100vh;\r\n  width: 100%;\r\n}\r\n\r\n.map-view {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.search-container {\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 1000;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  width: 80%;\r\n  max-width: 800px;\r\n}\r\n\r\n.full-width {\r\n  width: 100%;\r\n}\r\n\r\n.suggestion-item {\r\n  padding: 8px 0;\r\n}\r\n\r\n.suggestion-item .name {\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n}\r\n\r\n.suggestion-item .id {\r\n  font-size: 12px;\r\n  color: #999;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .search-container {\r\n    width: 90%;\r\n    padding: 15px;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAEnBA,KAAK,EAAC;AAAkB;;EAcdA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAM;;EACZA,KAAK,EAAC;AAAI;;EAiBZA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAM;;EACZA,KAAK,EAAC;AAAI;;;;;;uBArC7BC,mBAAA,CAoDM,OApDNC,UAoDM,GAnDJC,mBAAA,YAAe,EACfC,mBAAA,CA8CM,OA9CNC,UA8CM,GA7CJC,YAAA,CA4CSC,iBAAA;IA5CAC,MAAM,EAAE;EAAE;IAJzBC,OAAA,EAAAC,QAAA,CAKQ,MAkBS,CAlBTJ,YAAA,CAkBSK,iBAAA;MAlBAC,IAAI,EAAE;IAAC;MALxBH,OAAA,EAAAC,QAAA,CAMU,MAAuB,CAAvBP,mBAAA,oBAAuB,EACvBG,YAAA,CAekBO,0BAAA;QAtB5BC,UAAA,EAQuBC,KAAA,CAAAC,UAAU;QARjC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAQuBH,KAAA,CAAAC,UAAU,GAAAE,MAAA;QAClB,mBAAiB,EAAEC,QAAA,CAAAC,gBAAgB;QACpCC,WAAW,EAAC,OAAO;QACnBC,SAAS,EAAT,EAAS;QACTtB,KAAK,EAAC,YAAY;QACjB,kBAAgB,EAAE,KAAK;QACvBuB,QAAM,EAAEJ,QAAA,CAAAK;;QAEAf,OAAO,EAAAC,QAAA,CAChB,CAGM;UAJce;QAAI,OACxBrB,mBAAA,CAGM,OAHNsB,UAGM,GAFJtB,mBAAA,CAAuC,OAAvCuB,UAAuC,EAAAC,gBAAA,CAAlBH,IAAI,CAACI,IAAI,kBAC9BzB,mBAAA,CAA2C,OAA3C0B,UAA2C,EAA3B,MAAI,GAAAF,gBAAA,CAAGH,IAAI,CAACM,MAAM,iB;QAnBlDC,CAAA;;MAAAA,CAAA;QAwBQ1B,YAAA,CAkBSK,iBAAA;MAlBAC,IAAI,EAAE;IAAC;MAxBxBH,OAAA,EAAAC,QAAA,CAyBU,MAAuB,CAAvBP,mBAAA,oBAAuB,EACvBG,YAAA,CAekBO,0BAAA;QAzC5BC,UAAA,EA2BuBC,KAAA,CAAAkB,QAAQ;QA3B/B,uBAAAhB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA2BuBH,KAAA,CAAAkB,QAAQ,GAAAf,MAAA;QAChB,mBAAiB,EAAEC,QAAA,CAAAC,gBAAgB;QACpCC,WAAW,EAAC,OAAO;QACnBC,SAAS,EAAT,EAAS;QACTtB,KAAK,EAAC,YAAY;QACjB,kBAAgB,EAAE,KAAK;QACvBuB,QAAM,EAAEJ,QAAA,CAAAe;;QAEAzB,OAAO,EAAAC,QAAA,CAChB,CAGM;UAJce;QAAI,OACxBrB,mBAAA,CAGM,OAHN+B,UAGM,GAFJ/B,mBAAA,CAAuC,OAAvCgC,UAAuC,EAAAR,gBAAA,CAAlBH,IAAI,CAACI,IAAI,kBAC9BzB,mBAAA,CAA2C,OAA3CiC,UAA2C,EAA3B,MAAI,GAAAT,gBAAA,CAAGH,IAAI,CAACM,MAAM,iB;QAtClDC,CAAA;;MAAAA,CAAA;QA2CQ1B,YAAA,CAISK,iBAAA;MAJAC,IAAI,EAAE;IAAC;MA3CxBH,OAAA,EAAAC,QAAA,CA4CU,MAEY,CAFZJ,YAAA,CAEYgC,oBAAA;QAFDC,IAAI,EAAC,SAAS;QAAEC,OAAK,EAAErB,QAAA,CAAAsB,WAAW;QAAGC,OAAO,EAAE3B,KAAA,CAAA2B;;QA5CnEjC,OAAA,EAAAC,QAAA,CA4C4E,MAElEO,MAAA,QAAAA,MAAA,OA9CV0B,gBAAA,CA4C4E,QAElE,E;QA9CVX,CAAA;;MAAAA,CAAA;;IAAAA,CAAA;QAmDI7B,mBAAA,UAAa,E,0BACbC,mBAAA,CAAqC;IAAhCwC,EAAE,EAAC,KAAK;IAAC5C,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}