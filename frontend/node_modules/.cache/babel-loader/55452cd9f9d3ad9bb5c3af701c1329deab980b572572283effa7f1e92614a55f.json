{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"map-container\"\n};\nconst _hoisted_2 = {\n  class: \"search-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_col = _resolveComponent(\"el-col\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 搜索框容器，使用 Element Plus 的栅格系统使布局更加灵活 \"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_el_row, {\n    gutter: 20\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: $data.startPoint,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.startPoint = $event),\n        placeholder: \"请输入起点\",\n        clearable: \"\"\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: $data.endPoint,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.endPoint = $event),\n        placeholder: \"请输入终点\",\n        clearable: \"\"\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 6\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.searchRoute\n      }, {\n        default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"查找路线\")])),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]), _createCommentVNode(\" 地图容器 \"), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    id: \"map\",\n    class: \"map-view\"\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_createVNode","_component_el_row","gutter","default","_withCtx","_component_el_col","span","_component_el_input","modelValue","$data","startPoint","_cache","$event","placeholder","clearable","_","endPoint","_component_el_button","type","onClick","$options","searchRoute","_createTextVNode","id"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapview.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 搜索框容器，使用 Element Plus 的栅格系统使布局更加灵活 -->\r\n    <div class=\"search-container\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"9\">\r\n          <el-input\r\n              v-model=\"startPoint\"\r\n              placeholder=\"请输入起点\"\r\n              clearable\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"9\">\r\n          <el-input\r\n              v-model=\"endPoint\"\r\n              placeholder=\"请输入终点\"\r\n              clearable\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-button type=\"primary\" @click=\"searchRoute\">查找路线</el-button>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n\r\n    <!-- 地图容器 -->\r\n    <div id=\"map\" class=\"map-view\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 导入所需的组件和样式\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { ElMessage } from 'element-plus'\r\nimport 'element-plus/dist/index.css'\r\n\r\nexport default {\r\n  name: 'OsmMap',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      startPoint: '',    // 起点输入值\r\n      endPoint: '',      // 终点输入值\r\n      startMarker: null, // 起点标记\r\n      endMarker: null,   // 终点标记\r\n      routePath: null,   // 路径线\r\n      // 测试用的节点ID映射\r\n      nodeMapping: {\r\n        '松江大学城': 2845789961,\r\n        '松江南站': 946031310,\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    // 组件挂载后初始化地图\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      const options = {\r\n        center: [31.500000, 121.750000],\r\n        minZoom: 0,\r\n        maxZoom: 18,\r\n        zoom: 10,\r\n        zoomControl: true,\r\n        doubleClickZoom: true,\r\n        dragging: true,\r\n        boxZoom: true,\r\n        scrollWheelZoom: true,\r\n        zoomSnap: 0.5,\r\n        fullscreenControl: true,\r\n      };\r\n\r\n      // 初始化地图实例\r\n      this.map = L.map('map', options);\r\n\r\n      // 添加底图图层\r\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n        attribution: 'Map data © <a href=\"https://www.openstreetmap.org\">OpenStreetMap</a> contributors',\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    // 清除地图上的标记和路径\r\n    clearMap() {\r\n      if (this.startMarker) this.map.removeLayer(this.startMarker);\r\n      if (this.endMarker) this.map.removeLayer(this.endMarker);\r\n      if (this.routePath) this.map.removeLayer(this.routePath);\r\n    },\r\n\r\n    // 搜索路线并在地图上显示\r\n    async searchRoute() {\r\n      try {\r\n        // 检查输入是否完整\r\n        if (!this.startPoint || !this.endPoint) {\r\n          ElMessage.warning('请输入起点和终点');\r\n          return;\r\n        }\r\n\r\n        // 获取节点ID\r\n        const startId = this.nodeMapping[this.startPoint];\r\n        const endId = this.nodeMapping[this.endPoint];\r\n\r\n        if (!startId || !endId) {\r\n          ElMessage.warning('找不到对应的地点，请检查输入');\r\n          return;\r\n        }\r\n\r\n        // 发起路径查找请求\r\n        const response = await fetch('http://localhost:18080/route', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            start_id: startId,\r\n            end_id: endId\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('路径查找失败');\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // 清除之前的标记和路径\r\n        this.clearMap();\r\n\r\n        // 绘制新的路径\r\n        if (data.path && data.path.length > 0) {\r\n          // 添加起终点标记\r\n          this.startMarker = L.marker(data.path[0]).addTo(this.map);\r\n          this.endMarker = L.marker(data.path[data.path.length - 1]).addTo(this.map);\r\n\r\n          // 绘制路径线\r\n          this.routePath = L.polyline(data.path, {\r\n            color: 'blue',\r\n            weight: 3,\r\n            opacity: 0.7\r\n          }).addTo(this.map);\r\n\r\n          // 调整地图视野以显示完整路径\r\n          this.map.fitBounds(this.routePath.getBounds(), {\r\n            padding: [50, 50]\r\n          });\r\n\r\n          ElMessage.success('路径已显示');\r\n        } else {\r\n          ElMessage.warning('未找到可行路径');\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        ElMessage.error('查找路径时出错，请重试');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.map-container {\r\n  position: relative;\r\n  height: 100vh;\r\n  width: 100%;\r\n}\r\n\r\n.map-view {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.search-container {\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 1000;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  width: 80%;\r\n  max-width: 800px;\r\n}\r\n\r\n/* 确保输入框在移动设备上也能正常显示 */\r\n@media (max-width: 768px) {\r\n  .search-container {\r\n    width: 90%;\r\n    padding: 15px;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAEnBA,KAAK,EAAC;AAAkB;;;;;;uBAF/BC,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJC,mBAAA,wCAA2C,EAC3CC,mBAAA,CAoBM,OApBNC,UAoBM,GAnBJC,YAAA,CAkBSC,iBAAA;IAlBAC,MAAM,EAAE;EAAE;IAJzBC,OAAA,EAAAC,QAAA,CAKQ,MAMS,CANTJ,YAAA,CAMSK,iBAAA;MANAC,IAAI,EAAE;IAAC;MALxBH,OAAA,EAAAC,QAAA,CAMU,MAIE,CAJFJ,YAAA,CAIEO,mBAAA;QAVZC,UAAA,EAOuBC,KAAA,CAAAC,UAAU;QAPjC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOuBH,KAAA,CAAAC,UAAU,GAAAE,MAAA;QACnBC,WAAW,EAAC,OAAO;QACnBC,SAAS,EAAT;;MATdC,CAAA;QAYQf,YAAA,CAMSK,iBAAA;MANAC,IAAI,EAAE;IAAC;MAZxBH,OAAA,EAAAC,QAAA,CAaU,MAIE,CAJFJ,YAAA,CAIEO,mBAAA;QAjBZC,UAAA,EAcuBC,KAAA,CAAAO,QAAQ;QAd/B,uBAAAL,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAcuBH,KAAA,CAAAO,QAAQ,GAAAJ,MAAA;QACjBC,WAAW,EAAC,OAAO;QACnBC,SAAS,EAAT;;MAhBdC,CAAA;QAmBQf,YAAA,CAESK,iBAAA;MAFAC,IAAI,EAAE;IAAC;MAnBxBH,OAAA,EAAAC,QAAA,CAoBU,MAA+D,CAA/DJ,YAAA,CAA+DiB,oBAAA;QAApDC,IAAI,EAAC,SAAS;QAAEC,OAAK,EAAEC,QAAA,CAAAC;;QApB5ClB,OAAA,EAAAC,QAAA,CAoByD,MAAIO,MAAA,QAAAA,MAAA,OApB7DW,gBAAA,CAoByD,MAAI,E;QApB7DP,CAAA;;MAAAA,CAAA;;IAAAA,CAAA;QAyBIlB,mBAAA,UAAa,E,0BACbC,mBAAA,CAAqC;IAAhCyB,EAAE,EAAC,KAAK;IAAC7B,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}