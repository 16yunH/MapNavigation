{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { ElMessage } from 'element-plus';\nimport 'element-plus/dist/index.css';\nimport debounce from 'lodash/debounce';\nexport default {\n  name: 'MapView',\n  data() {\n    return {\n      map: null,\n      // Leaflet地图实例\n      startPoint: '',\n      // 起点搜索文本\n      endPoint: '',\n      // 终点搜索文本\n      startMarker: null,\n      // 起点标记\n      endMarker: null,\n      // 终点标记\n      routePath: null,\n      // 路径线\n      selectedStartId: null,\n      // 选中的起点ID\n      selectedEndId: null,\n      // 选中的终点ID\n      loading: false,\n      // 加载状态\n      pathInfo: null,\n      // 路径信息\n      bounds: {\n        // 地图边界\n        minLat: 28.2817100,\n        minLon: 117.1911600,\n        maxLat: 28.3225200,\n        maxLon: 117.2551900\n      }\n    };\n  },\n  computed: {\n    // 判断是否可以进行路径搜索\n    canSearch() {\n      return this.selectedStartId && this.selectedEndId && !this.loading;\n    }\n  },\n  mounted() {\n    // 组件挂载后初始化地图\n    this.initMap();\n  },\n  methods: {\n    // 初始化地图\n    initMap() {\n      // 计算地图中心点\n      const centerLat = (this.bounds.minLat + this.bounds.maxLat) / 2;\n      const centerLon = (this.bounds.minLon + this.bounds.maxLon) / 2;\n\n      // 创建地图实例\n      this.map = L.map('map', {\n        center: [centerLat, centerLon],\n        zoom: 15,\n        minZoom: 14,\n        maxZoom: 18,\n        zoomControl: true,\n        doubleClickZoom: true,\n        scrollWheelZoom: true\n      });\n\n      // 添加OSM底图\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n        maxZoom: 18,\n        tileSize: 256\n      }).addTo(this.map);\n\n      // 设置地图边界\n      const bounds = L.latLngBounds([this.bounds.minLat, this.bounds.minLon], [this.bounds.maxLat, this.bounds.maxLon]);\n      this.map.setMaxBounds(bounds);\n\n      // 添加比例尺\n      L.control.scale({\n        imperial: false\n      }).addTo(this.map);\n    },\n    // 处理地点搜索的方法\n    querySearchAsync: debounce(async function (queryString, callback) {\n      if (!queryString) {\n        callback([]);\n        return;\n      }\n      try {\n        const response = await fetch('http://localhost:18080/search', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: queryString\n          })\n        });\n        if (!response.ok) {\n          throw new Error('搜索请求失败');\n        }\n        const data = await response.json();\n        callback(data);\n      } catch (error) {\n        console.error('搜索错误:', error);\n        ElMessage.error('地点搜索失败');\n        callback([]);\n      }\n    }, 300),\n    // 处理起点选择\n    handleStartSelect(item) {\n      this.selectedStartId = item.nodeId;\n      // 清除已有的起点标记\n      if (this.startMarker) {\n        this.map.removeLayer(this.startMarker);\n      }\n      // 添加新的起点标记\n      this.startMarker = L.marker([item.lat, item.lon]).addTo(this.map).bindPopup(`起点：${item.name}`).openPopup();\n\n      // 平滑移动到选中位置\n      this.map.flyTo([item.lat, item.lon], 16);\n    },\n    // 处理终点选择\n    handleEndSelect(item) {\n      this.selectedEndId = item.nodeId;\n      if (this.endMarker) {\n        this.map.removeLayer(this.endMarker);\n      }\n      this.endMarker = L.marker([item.lat, item.lon]).addTo(this.map).bindPopup(`终点：${item.name}`).openPopup();\n      this.map.flyTo([item.lat, item.lon], 16);\n    },\n    // 查找路径\n    async findPath() {\n      if (!this.canSearch) return;\n      this.loading = true;\n      try {\n        const response = await fetch('http://localhost:18080/route', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            start_id: this.selectedStartId,\n            end_id: this.selectedEndId\n          })\n        });\n        if (!response.ok) {\n          throw new Error('路径查找失败');\n        }\n        const data = await response.json();\n\n        // 清除现有路径\n        this.clearMap();\n        if (data.path && data.path.length > 0) {\n          // 绘制新路径\n          this.routePath = L.polyline(data.path, {\n            color: '#3388ff',\n            weight: 6,\n            opacity: 0.8,\n            lineJoin: 'round'\n          }).addTo(this.map);\n\n          // 添加起终点标记\n          this.startMarker = L.marker(data.path[0]).addTo(this.map).bindPopup('起点').openPopup();\n          this.endMarker = L.marker(data.path[data.path.length - 1]).addTo(this.map).bindPopup('终点');\n\n          // 调整视野以显示完整路径\n          this.map.fitBounds(this.routePath.getBounds(), {\n            padding: [50, 50]\n          });\n\n          // 保存路径信息\n          this.pathInfo = {\n            distance: data.distance,\n            duration: data.distance / 1.4 // 假设步行速度1.4m/s\n          };\n          ElMessage.success('路径已显示');\n        } else {\n          ElMessage.warning('未找到可行路径');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        ElMessage.error('路径查找失败，请重试');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 清除地图上的标记和路径\n    clearMap() {\n      if (this.startMarker) this.map.removeLayer(this.startMarker);\n      if (this.endMarker) this.map.removeLayer(this.endMarker);\n      if (this.routePath) this.map.removeLayer(this.routePath);\n      this.pathInfo = null;\n    },\n    // 格式化距离显示\n    formatDistance(meters) {\n      return meters > 1000 ? `${(meters / 1000).toFixed(2)} 公里` : `${Math.round(meters)} 米`;\n    },\n    // 格式化时间显示\n    formatDuration(seconds) {\n      const minutes = Math.round(seconds / 60);\n      return minutes > 60 ? `${Math.floor(minutes / 60)}小时${minutes % 60}分钟` : `${minutes}分钟`;\n    }\n  }\n};","map":{"version":3,"names":["L","ElMessage","debounce","name","data","map","startPoint","endPoint","startMarker","endMarker","routePath","selectedStartId","selectedEndId","loading","pathInfo","bounds","minLat","minLon","maxLat","maxLon","computed","canSearch","mounted","initMap","methods","centerLat","centerLon","center","zoom","minZoom","maxZoom","zoomControl","doubleClickZoom","scrollWheelZoom","tileLayer","attribution","tileSize","addTo","latLngBounds","setMaxBounds","control","scale","imperial","querySearchAsync","queryString","callback","response","fetch","method","headers","body","JSON","stringify","query","ok","Error","json","error","console","handleStartSelect","item","nodeId","removeLayer","marker","lat","lon","bindPopup","openPopup","flyTo","handleEndSelect","findPath","start_id","end_id","clearMap","path","length","polyline","color","weight","opacity","lineJoin","fitBounds","getBounds","padding","distance","duration","success","warning","formatDistance","meters","toFixed","Math","round","formatDuration","seconds","minutes","floor"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapview.vue"],"sourcesContent":["<!-- MapView.vue - 地图显示及路径查找组件 -->\r\n<template>\r\n  <div class=\"map-container\">\r\n    <!-- 搜索控制面板 -->\r\n    <div class=\"search-container\">\r\n      <el-row :gutter=\"20\">\r\n        <!-- 起点搜索输入框 -->\r\n        <el-col :span=\"9\">\r\n          <el-autocomplete\r\n              v-model=\"startPoint\"\r\n              :fetch-suggestions=\"querySearchAsync\"\r\n              placeholder=\"请输入起点位置\"\r\n              :trigger-on-focus=\"false\"\r\n              clearable\r\n              class=\"full-width\"\r\n              @select=\"handleStartSelect\"\r\n          >\r\n            <!-- 自定义搜索建议的显示格式 -->\r\n            <template #default=\"{ item }\">\r\n              <div class=\"suggestion-item\">\r\n                <div class=\"name\">{{ item.name }}</div>\r\n                <div class=\"address\" v-if=\"item.type\">{{ item.type }}</div>\r\n              </div>\r\n            </template>\r\n          </el-autocomplete>\r\n        </el-col>\r\n\r\n        <!-- 终点搜索输入框 -->\r\n        <el-col :span=\"9\">\r\n          <el-autocomplete\r\n              v-model=\"endPoint\"\r\n              :fetch-suggestions=\"querySearchAsync\"\r\n              placeholder=\"请输入终点位置\"\r\n              :trigger-on-focus=\"false\"\r\n              clearable\r\n              class=\"full-width\"\r\n              @select=\"handleEndSelect\"\r\n          >\r\n            <template #default=\"{ item }\">\r\n              <div class=\"suggestion-item\">\r\n                <div class=\"name\">{{ item.name }}</div>\r\n                <div class=\"address\" v-if=\"item.type\">{{ item.type }}</div>\r\n              </div>\r\n            </template>\r\n          </el-autocomplete>\r\n        </el-col>\r\n\r\n        <!-- 路径查找按钮 -->\r\n        <el-col :span=\"6\">\r\n          <el-button\r\n              type=\"primary\"\r\n              @click=\"findPath\"\r\n              :loading=\"loading\"\r\n              :disabled=\"!canSearch\"\r\n          >\r\n            查找路径\r\n          </el-button>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <!-- 路径信息显示区域 -->\r\n      <div v-if=\"pathInfo\" class=\"path-info\">\r\n        <div class=\"info-item\">\r\n          <span class=\"label\">距离：</span>\r\n          <span class=\"value\">{{ formatDistance(pathInfo.distance) }}</span>\r\n        </div>\r\n        <div class=\"info-item\">\r\n          <span class=\"label\">预计时间：</span>\r\n          <span class=\"value\">{{ formatDuration(pathInfo.duration) }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 地图容器 -->\r\n    <div id=\"map\" class=\"map-view\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { ElMessage } from 'element-plus';\r\nimport 'element-plus/dist/index.css';\r\nimport debounce from 'lodash/debounce';\r\n\r\nexport default {\r\n  name: 'MapView',\r\n  data() {\r\n    return {\r\n      map: null,                    // Leaflet地图实例\r\n      startPoint: '',               // 起点搜索文本\r\n      endPoint: '',                 // 终点搜索文本\r\n      startMarker: null,            // 起点标记\r\n      endMarker: null,              // 终点标记\r\n      routePath: null,              // 路径线\r\n      selectedStartId: null,        // 选中的起点ID\r\n      selectedEndId: null,          // 选中的终点ID\r\n      loading: false,               // 加载状态\r\n      pathInfo: null,               // 路径信息\r\n      bounds: {                     // 地图边界\r\n        minLat: 28.2817100,\r\n        minLon: 117.1911600,\r\n        maxLat: 28.3225200,\r\n        maxLon: 117.2551900\r\n      }\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    // 判断是否可以进行路径搜索\r\n    canSearch() {\r\n      return this.selectedStartId && this.selectedEndId && !this.loading;\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    // 组件挂载后初始化地图\r\n    this.initMap();\r\n  },\r\n\r\n  methods: {\r\n    // 初始化地图\r\n    initMap() {\r\n      // 计算地图中心点\r\n      const centerLat = (this.bounds.minLat + this.bounds.maxLat) / 2;\r\n      const centerLon = (this.bounds.minLon + this.bounds.maxLon) / 2;\r\n\r\n      // 创建地图实例\r\n      this.map = L.map('map', {\r\n        center: [centerLat, centerLon],\r\n        zoom: 15,\r\n        minZoom: 14,\r\n        maxZoom: 18,\r\n        zoomControl: true,\r\n        doubleClickZoom: true,\r\n        scrollWheelZoom: true\r\n      });\r\n\r\n      // 添加OSM底图\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '© OpenStreetMap contributors',\r\n        maxZoom: 18,\r\n        tileSize: 256\r\n      }).addTo(this.map);\r\n\r\n      // 设置地图边界\r\n      const bounds = L.latLngBounds(\r\n          [this.bounds.minLat, this.bounds.minLon],\r\n          [this.bounds.maxLat, this.bounds.maxLon]\r\n      );\r\n      this.map.setMaxBounds(bounds);\r\n\r\n      // 添加比例尺\r\n      L.control.scale({ imperial: false }).addTo(this.map);\r\n    },\r\n\r\n    // 处理地点搜索的方法\r\n    querySearchAsync: debounce(async function(queryString, callback) {\r\n      if (!queryString) {\r\n        callback([]);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:18080/search', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ query: queryString })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('搜索请求失败');\r\n        }\r\n\r\n        const data = await response.json();\r\n        callback(data);\r\n      } catch (error) {\r\n        console.error('搜索错误:', error);\r\n        ElMessage.error('地点搜索失败');\r\n        callback([]);\r\n      }\r\n    }, 300),\r\n\r\n    // 处理起点选择\r\n    handleStartSelect(item) {\r\n      this.selectedStartId = item.nodeId;\r\n      // 清除已有的起点标记\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      // 添加新的起点标记\r\n      this.startMarker = L.marker([item.lat, item.lon])\r\n          .addTo(this.map)\r\n          .bindPopup(`起点：${item.name}`)\r\n          .openPopup();\r\n\r\n      // 平滑移动到选中位置\r\n      this.map.flyTo([item.lat, item.lon], 16);\r\n    },\r\n\r\n    // 处理终点选择\r\n    handleEndSelect(item) {\r\n      this.selectedEndId = item.nodeId;\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      this.endMarker = L.marker([item.lat, item.lon])\r\n          .addTo(this.map)\r\n          .bindPopup(`终点：${item.name}`)\r\n          .openPopup();\r\n\r\n      this.map.flyTo([item.lat, item.lon], 16);\r\n    },\r\n\r\n    // 查找路径\r\n    async findPath() {\r\n      if (!this.canSearch) return;\r\n\r\n      this.loading = true;\r\n      try {\r\n        const response = await fetch('http://localhost:18080/route', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            start_id: this.selectedStartId,\r\n            end_id: this.selectedEndId\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('路径查找失败');\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // 清除现有路径\r\n        this.clearMap();\r\n\r\n        if (data.path && data.path.length > 0) {\r\n          // 绘制新路径\r\n          this.routePath = L.polyline(data.path, {\r\n            color: '#3388ff',\r\n            weight: 6,\r\n            opacity: 0.8,\r\n            lineJoin: 'round'\r\n          }).addTo(this.map);\r\n\r\n          // 添加起终点标记\r\n          this.startMarker = L.marker(data.path[0])\r\n              .addTo(this.map)\r\n              .bindPopup('起点')\r\n              .openPopup();\r\n          this.endMarker = L.marker(data.path[data.path.length - 1])\r\n              .addTo(this.map)\r\n              .bindPopup('终点');\r\n\r\n          // 调整视野以显示完整路径\r\n          this.map.fitBounds(this.routePath.getBounds(), {\r\n            padding: [50, 50]\r\n          });\r\n\r\n          // 保存路径信息\r\n          this.pathInfo = {\r\n            distance: data.distance,\r\n            duration: data.distance / 1.4 // 假设步行速度1.4m/s\r\n          };\r\n\r\n          ElMessage.success('路径已显示');\r\n        } else {\r\n          ElMessage.warning('未找到可行路径');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        ElMessage.error('路径查找失败，请重试');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    // 清除地图上的标记和路径\r\n    clearMap() {\r\n      if (this.startMarker) this.map.removeLayer(this.startMarker);\r\n      if (this.endMarker) this.map.removeLayer(this.endMarker);\r\n      if (this.routePath) this.map.removeLayer(this.routePath);\r\n      this.pathInfo = null;\r\n    },\r\n\r\n    // 格式化距离显示\r\n    formatDistance(meters) {\r\n      return meters > 1000\r\n          ? `${(meters / 1000).toFixed(2)} 公里`\r\n          : `${Math.round(meters)} 米`;\r\n    },\r\n\r\n    // 格式化时间显示\r\n    formatDuration(seconds) {\r\n      const minutes = Math.round(seconds / 60);\r\n      return minutes > 60\r\n          ? `${Math.floor(minutes / 60)}小时${minutes % 60}分钟`\r\n          : `${minutes}分钟`;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.map-container {\r\n  position: relative;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.map-view {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.search-container {\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 1000;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  width: 80%;\r\n  max-width: 800px;\r\n}\r\n\r\n.full-width {\r\n  width: 100%;\r\n}\r\n\r\n.suggestion-item {\r\n  padding: 8px 0;\r\n}\r\n\r\n.suggestion-item .name {\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n}\r\n\r\n.suggestion-item .address {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-top: 4px;\r\n}\r\n\r\n.path-info {\r\n  margin-top: 15px;\r\n  padding-top: 15px;\r\n  border-top: 1px solid #eee;\r\n}\r\n\r\n.info-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.info-item .label {\r\n  color: #666;\r\n  width: 80px;\r\n}\r\n\r\n.info-item .value {\r\n  color: #333;\r\n  font-weight: 500;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .search-container {\r\n    width: 90%;\r\n    padding: 15px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}