{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"map-container\"\n};\nconst _hoisted_2 = {\n  class: \"search-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_autocomplete = _resolveComponent(\"el-autocomplete\");\n  const _component_el_col = _resolveComponent(\"el-col\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_el_row, {\n    gutter: 20\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\" 使用 AutoComplete 组件替换原来的 Input 组件 \"), _createVNode(_component_el_autocomplete, {\n        modelValue: $data.startPoint,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.startPoint = $event),\n        \"fetch-suggestions\": $options.querySearch,\n        placeholder: \"请输入起点\",\n        clearable: \"\",\n        onSelect: $options.handleStartSelect,\n        class: \"full-width\"\n      }, null, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_autocomplete, {\n        modelValue: $data.endPoint,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.endPoint = $event),\n        \"fetch-suggestions\": $options.querySearch,\n        placeholder: \"请输入终点\",\n        clearable: \"\",\n        onSelect: $options.handleEndSelect,\n        class: \"full-width\"\n      }, null, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 6\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.searchRoute\n      }, {\n        default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"查找路线\")])),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    id: \"map\",\n    class: \"map-view\"\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_el_row","gutter","default","_withCtx","_component_el_col","span","_createCommentVNode","_component_el_autocomplete","modelValue","$data","startPoint","_cache","$event","$options","querySearch","placeholder","clearable","onSelect","handleStartSelect","_","endPoint","handleEndSelect","_component_el_button","type","onClick","searchRoute","_createTextVNode","id"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapview.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <div class=\"search-container\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"9\">\r\n          <!-- 使用 AutoComplete 组件替换原来的 Input 组件 -->\r\n          <el-autocomplete\r\n              v-model=\"startPoint\"\r\n              :fetch-suggestions=\"querySearch\"\r\n              placeholder=\"请输入起点\"\r\n              clearable\r\n              @select=\"handleStartSelect\"\r\n              class=\"full-width\"\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"9\">\r\n          <el-autocomplete\r\n              v-model=\"endPoint\"\r\n              :fetch-suggestions=\"querySearch\"\r\n              placeholder=\"请输入终点\"\r\n              clearable\r\n              @select=\"handleEndSelect\"\r\n              class=\"full-width\"\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-button type=\"primary\" @click=\"searchRoute\">查找路线</el-button>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n    <div id=\"map\" class=\"map-view\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { ElMessage } from 'element-plus'\r\nimport 'element-plus/dist/index.css'\r\n\r\nexport default {\r\n  name: 'OsmMap',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      startPoint: '',\r\n      endPoint: '',\r\n      startMarker: null,\r\n      endMarker: null,\r\n      routePath: null,\r\n      // 扩展地点数据，包含更多信息\r\n      locations: [\r\n        { value: '松江大学城', nodeId: 2845789961, location: [31.500000, 121.750000] },\r\n        { value: '松江南站', nodeId: 946031310, location: [31.510000, 121.760000] },\r\n        // 可以添加更多地点\r\n        { value: '泗泾镇', nodeId: 123456789, location: [31.520000, 121.770000] },\r\n        { value: '松江体育中心', nodeId: 987654321, location: [31.530000, 121.780000] },\r\n        { value: '松江大学城地铁站', nodeId: 456789123, location: [31.540000, 121.790000] }\r\n      ],\r\n      selectedStartLocation: null,  // 存储选中的起点位置\r\n      selectedEndLocation: null     // 存储选中的终点位置\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    // 初始化地图的方法保持不变\r\n    initMap() {\r\n      // ... 保持原有的地图初始化代码\r\n    },\r\n\r\n    // 搜索建议的实现\r\n    querySearch(queryString, callback) {\r\n      // 如果输入为空，返回所有选项\r\n      if (queryString === '') {\r\n        callback(this.locations);\r\n        return;\r\n      }\r\n\r\n      // 根据输入过滤地点\r\n      const results = this.locations.filter(location =>\r\n          location.value.toLowerCase().includes(queryString.toLowerCase())\r\n      );\r\n\r\n      // 返回过滤后的结果\r\n      callback(results);\r\n    },\r\n\r\n    // 处理起点选择\r\n    handleStartSelect(item) {\r\n      this.selectedStartLocation = item;\r\n      // 如果有之前的起点标记，先移除\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      // 在地图上添加新的起点标记\r\n      this.startMarker = L.marker(item.location)\r\n          .addTo(this.map)\r\n          .bindPopup('起点：' + item.value)\r\n          .openPopup();\r\n      // 调整地图视野\r\n      this.map.setView(item.location, 15);\r\n    },\r\n\r\n    // 处理终点选择\r\n    handleEndSelect(item) {\r\n      this.selectedEndLocation = item;\r\n      // 如果有之前的终点标记，先移除\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      // 在地图上添加新的终点标记\r\n      this.endMarker = L.marker(item.location)\r\n          .addTo(this.map)\r\n          .bindPopup('终点：' + item.value)\r\n          .openPopup();\r\n      // 调整地图视野\r\n      this.map.setView(item.location, 15);\r\n    },\r\n\r\n    // 修改后的路径搜索方法\r\n    async searchRoute() {\r\n      try {\r\n        // 检查是否已选择起点和终点\r\n        if (!this.selectedStartLocation || !this.selectedEndLocation) {\r\n          ElMessage.warning('请从提示列表中选择起点和终点');\r\n          return;\r\n        }\r\n\r\n        // 使用选中位置的 nodeId 发送请求\r\n        const response = await fetch('http://localhost:18080/route', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            start_id: this.selectedStartLocation.nodeId,\r\n            end_id: this.selectedEndLocation.nodeId\r\n          })\r\n        });\r\n\r\n        // ... 后续的路径处理代码保持不变\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        ElMessage.error('查找路径时出错，请重试');\r\n      }\r\n    },\r\n\r\n    clearMap() {\r\n      // ... 保持原有的清除地图方法\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 添加一些新的样式 */\r\n.full-width {\r\n  width: 100%;\r\n}\r\n\r\n.el-autocomplete-suggestion {\r\n  z-index: 9999 !important;\r\n}\r\n\r\n/* 保持原有的其他样式 */\r\n.map-container {\r\n  position: relative;\r\n  height: 100vh;\r\n  width: 100%;\r\n}\r\n\r\n.map-view {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.search-container {\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 1000;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px rgba(0,0,0,0.1);\r\n  width: 80%;\r\n  max-width: 800px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .search-container {\r\n    width: 90%;\r\n    padding: 15px;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAkB;;;;;;uBAD/BC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BJC,mBAAA,CA2BM,OA3BNC,UA2BM,GA1BJC,YAAA,CAyBSC,iBAAA;IAzBAC,MAAM,EAAE;EAAE;IAHzBC,OAAA,EAAAC,QAAA,CAIQ,MAUS,CAVTJ,YAAA,CAUSK,iBAAA;MAVAC,IAAI,EAAE;IAAC;MAJxBH,OAAA,EAAAC,QAAA,CAKU,MAAyC,CAAzCG,mBAAA,sCAAyC,EACzCP,YAAA,CAOEQ,0BAAA;QAbZC,UAAA,EAOuBC,KAAA,CAAAC,UAAU;QAPjC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOuBH,KAAA,CAAAC,UAAU,GAAAE,MAAA;QAClB,mBAAiB,EAAEC,QAAA,CAAAC,WAAW;QAC/BC,WAAW,EAAC,OAAO;QACnBC,SAAS,EAAT,EAAS;QACRC,QAAM,EAAEJ,QAAA,CAAAK,iBAAiB;QAC1BxB,KAAK,EAAC;;MAZpByB,CAAA;QAeQpB,YAAA,CASSK,iBAAA;MATAC,IAAI,EAAE;IAAC;MAfxBH,OAAA,EAAAC,QAAA,CAgBU,MAOE,CAPFJ,YAAA,CAOEQ,0BAAA;QAvBZC,UAAA,EAiBuBC,KAAA,CAAAW,QAAQ;QAjB/B,uBAAAT,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiBuBH,KAAA,CAAAW,QAAQ,GAAAR,MAAA;QAChB,mBAAiB,EAAEC,QAAA,CAAAC,WAAW;QAC/BC,WAAW,EAAC,OAAO;QACnBC,SAAS,EAAT,EAAS;QACRC,QAAM,EAAEJ,QAAA,CAAAQ,eAAe;QACxB3B,KAAK,EAAC;;MAtBpByB,CAAA;QAyBQpB,YAAA,CAESK,iBAAA;MAFAC,IAAI,EAAE;IAAC;MAzBxBH,OAAA,EAAAC,QAAA,CA0BU,MAA+D,CAA/DJ,YAAA,CAA+DuB,oBAAA;QAApDC,IAAI,EAAC,SAAS;QAAEC,OAAK,EAAEX,QAAA,CAAAY;;QA1B5CvB,OAAA,EAAAC,QAAA,CA0ByD,MAAIQ,MAAA,QAAAA,MAAA,OA1B7De,gBAAA,CA0ByD,MAAI,E;QA1B7DP,CAAA;;MAAAA,CAAA;;IAAAA,CAAA;kCA8BItB,mBAAA,CAAqC;IAAhC8B,EAAE,EAAC,KAAK;IAACjC,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}