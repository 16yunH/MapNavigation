{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"map-container\"\n};\nconst _hoisted_2 = {\n  class: \"search-container\"\n};\nconst _hoisted_3 = {\n  class: \"suggestion-item\"\n};\nconst _hoisted_4 = {\n  class: \"name\"\n};\nconst _hoisted_5 = {\n  class: \"address\"\n};\nconst _hoisted_6 = {\n  class: \"suggestion-item\"\n};\nconst _hoisted_7 = {\n  class: \"name\"\n};\nconst _hoisted_8 = {\n  class: \"address\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_autocomplete = _resolveComponent(\"el-autocomplete\");\n  const _component_el_col = _resolveComponent(\"el-col\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_el_row, {\n    gutter: 20\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_autocomplete, {\n        modelValue: $data.startPoint,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.startPoint = $event),\n        \"fetch-suggestions\": $options.querySearchAsync,\n        placeholder: \"请输入上海市内的起点位置\",\n        \"trigger-on-focus\": false,\n        clearable: \"\",\n        onSelect: $options.handleStartSelect,\n        class: \"full-width\"\n      }, {\n        default: _withCtx(({\n          item\n        }) => [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, _toDisplayString(item.display_name.split(',')[0]), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_5, _toDisplayString($options.formatAddress(item.display_name)), 1 /* TEXT */)])]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_autocomplete, {\n        modelValue: $data.endPoint,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.endPoint = $event),\n        \"fetch-suggestions\": $options.querySearchAsync,\n        placeholder: \"请输入上海市内的终点位置\",\n        \"trigger-on-focus\": false,\n        clearable: \"\",\n        onSelect: $options.handleEndSelect,\n        class: \"full-width\"\n      }, {\n        default: _withCtx(({\n          item\n        }) => [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, _toDisplayString(item.display_name.split(',')[0]), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, _toDisplayString($options.formatAddress(item.display_name)), 1 /* TEXT */)])]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 6\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.searchRoute\n      }, {\n        default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"查找路线\")])),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    id: \"map\",\n    class: \"map-view\"\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_el_row","gutter","default","_withCtx","_component_el_col","span","_component_el_autocomplete","modelValue","$data","startPoint","_cache","$event","$options","querySearchAsync","placeholder","clearable","onSelect","handleStartSelect","item","_hoisted_3","_hoisted_4","_toDisplayString","display_name","split","_hoisted_5","formatAddress","_","endPoint","handleEndSelect","_hoisted_6","_hoisted_7","_hoisted_8","_component_el_button","type","onClick","searchRoute","_createTextVNode","id"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapview.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <div class=\"search-container\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"9\">\r\n          <el-autocomplete\r\n              v-model=\"startPoint\"\r\n              :fetch-suggestions=\"querySearchAsync\"\r\n              placeholder=\"请输入上海市内的起点位置\"\r\n              :trigger-on-focus=\"false\"\r\n              clearable\r\n              @select=\"handleStartSelect\"\r\n              class=\"full-width\"\r\n          >\r\n            <template #default=\"{ item }\">\r\n              <div class=\"suggestion-item\">\r\n                <div class=\"name\">{{ item.display_name.split(',')[0] }}</div>\r\n                <div class=\"address\">{{ formatAddress(item.display_name) }}</div>\r\n              </div>\r\n            </template>\r\n          </el-autocomplete>\r\n        </el-col>\r\n        <el-col :span=\"9\">\r\n          <el-autocomplete\r\n              v-model=\"endPoint\"\r\n              :fetch-suggestions=\"querySearchAsync\"\r\n              placeholder=\"请输入上海市内的终点位置\"\r\n              :trigger-on-focus=\"false\"\r\n              clearable\r\n              @select=\"handleEndSelect\"\r\n              class=\"full-width\"\r\n          >\r\n            <template #default=\"{ item }\">\r\n              <div class=\"suggestion-item\">\r\n                <div class=\"name\">{{ item.display_name.split(',')[0] }}</div>\r\n                <div class=\"address\">{{ formatAddress(item.display_name) }}</div>\r\n              </div>\r\n            </template>\r\n          </el-autocomplete>\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-button type=\"primary\" @click=\"searchRoute\">查找路线</el-button>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n    <div id=\"map\" class=\"map-view\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { ElMessage } from 'element-plus';\r\nimport 'element-plus/dist/index.css';\r\n\r\nexport default {\r\n  name: 'OsmMap',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      startPoint: '',\r\n      endPoint: '',\r\n      startMarker: null,\r\n      endMarker: null,\r\n      routePath: null,\r\n      tileLayer: null,\r\n      selectedStartLocation: null,\r\n      selectedEndLocation: null,\r\n      searchTimeout: null,\r\n      // 上海市的地理边界范围\r\n      shanghaiBounds: {\r\n        minLon: 120.85,\r\n        maxLon: 122.05,\r\n        minLat: 30.67,\r\n        maxLat: 31.87\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // 初始化地图时将视图中心设置在上海市中心\r\n      this.map = L.map('map', {\r\n        center: [31.2304, 121.4737], // 上海市中心坐标\r\n        zoom: 11,\r\n        minZoom: 9,  // 限制最小缩放级别，确保用户能看到整个上海\r\n        maxZoom: 18,\r\n        zoomControl: true,\r\n        doubleClickZoom: true,\r\n        scrollWheelZoom: true\r\n      });\r\n\r\n      // 添加 OSM 底图\r\n      this.tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '© OpenStreetMap contributors',\r\n        maxZoom: 18,\r\n        subdomains: ['a', 'b', 'c']\r\n      }).addTo(this.map);\r\n\r\n      // 添加比例尺\r\n      L.control.scale({\r\n        imperial: false,\r\n        metric: true\r\n      }).addTo(this.map);\r\n\r\n      // 为上海市添加边界框以帮助用户识别搜索范围\r\n      L.rectangle([\r\n        [this.shanghaiBounds.minLat, this.shanghaiBounds.minLon],\r\n        [this.shanghaiBounds.maxLat, this.shanghaiBounds.maxLon]\r\n      ], {\r\n        color: \"#ff7800\",\r\n        weight: 1,\r\n        fillOpacity: 0,\r\n        dashArray: '5, 10'\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    async querySearchAsync(queryString, callback) {\r\n      if (!queryString) {\r\n        callback([]);\r\n        return;\r\n      }\r\n\r\n      if (this.searchTimeout) {\r\n        clearTimeout(this.searchTimeout);\r\n      }\r\n\r\n      this.searchTimeout = setTimeout(async () => {\r\n        try {\r\n          // 构建搜索URL，添加上海市的限定条件\r\n          const response = await fetch(\r\n              `https://nominatim.openstreetmap.org/search?` +\r\n              `format=json&q=${encodeURIComponent(queryString + ', 上海市')}` + // 在搜索词后添加\"上海市\"\r\n              `&viewbox=${this.shanghaiBounds.minLon},${this.shanghaiBounds.maxLat},` +\r\n              `${this.shanghaiBounds.maxLon},${this.shanghaiBounds.minLat}` +\r\n              `&bounded=1&limit=8` +  // 增加结果数量到8个\r\n              `&countrycodes=cn`,\r\n              {\r\n                headers: {\r\n                  'Accept-Language': 'zh-CN'\r\n                }\r\n              }\r\n          );\r\n\r\n          if (!response.ok) {\r\n            throw new Error('搜索服务请求失败');\r\n          }\r\n\r\n          const data = await response.json();\r\n\r\n          // 过滤结果，确保只返回上海市内的位置\r\n          const suggestions = data\r\n              .filter(item => item.display_name.includes('上海市'))\r\n              .map(item => ({\r\n                value: item.display_name.split(',')[0],\r\n                display_name: item.display_name,\r\n                lat: parseFloat(item.lat),\r\n                lon: parseFloat(item.lon),\r\n                osm_id: item.osm_id,\r\n                osm_type: item.osm_type\r\n              }));\r\n\r\n          callback(suggestions);\r\n        } catch (error) {\r\n          console.error('搜索错误:', error);\r\n          ElMessage.error('地点搜索失败，请重试');\r\n          callback([]);\r\n        }\r\n      }, 300);\r\n    },\r\n\r\n    // 格式化地址显示，突出显示上海市内的地址部分\r\n    formatAddress(address) {\r\n      const parts = address.split(',').map(part => part.trim());\r\n      return parts\r\n          .filter(part => part.includes('上海市') || !part.includes('中国'))\r\n          .join(', ');\r\n    },\r\n\r\n    handleStartSelect(item) {\r\n      this.selectedStartLocation = item;\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n\r\n      this.startMarker = L.marker([item.lat, item.lon], {\r\n        title: item.value,\r\n        riseOnHover: true  // 鼠标悬停时突出显示标记\r\n      })\r\n          .addTo(this.map)\r\n          .bindPopup(`起点：${item.value}`)\r\n          .openPopup();\r\n\r\n      this.map.flyTo([item.lat, item.lon], 15, {\r\n        duration: 1.5,\r\n        easeLinearity: 0.25\r\n      });\r\n    },\r\n\r\n    handleEndSelect(item) {\r\n      // 终点选择处理的代码与起点类似\r\n      // ... 其余代码保持不变\r\n    },\r\n\r\n    async searchRoute() {\r\n      // ... 路径搜索的代码保持不变\r\n    },\r\n\r\n    clearMap() {\r\n      // ... 清除地图标记的代码保持不变\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 保持原有样式，添加一些新的样式来改善显示效果 */\r\n.suggestion-item {\r\n  padding: 8px 12px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.suggestion-item:hover {\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.suggestion-item .name {\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  color: #303133;\r\n}\r\n\r\n.suggestion-item .address {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-top: 4px;\r\n  white-space: normal;\r\n  word-break: break-all;\r\n  line-height: 1.3;\r\n}\r\n\r\n/* ... 其他原有样式保持不变 */\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAkB;;EAadA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAM;;EACZA,KAAK,EAAC;AAAS;;EAgBjBA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAM;;EACZA,KAAK,EAAC;AAAS;;;;;;uBAlClCC,mBAAA,CA6CM,OA7CNC,UA6CM,GA5CJC,mBAAA,CA0CM,OA1CNC,UA0CM,GAzCJC,YAAA,CAwCSC,iBAAA;IAxCAC,MAAM,EAAE;EAAE;IAHzBC,OAAA,EAAAC,QAAA,CAIQ,MAiBS,CAjBTJ,YAAA,CAiBSK,iBAAA;MAjBAC,IAAI,EAAE;IAAC;MAJxBH,OAAA,EAAAC,QAAA,CAKU,MAekB,CAflBJ,YAAA,CAekBO,0BAAA;QApB5BC,UAAA,EAMuBC,KAAA,CAAAC,UAAU;QANjC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMuBH,KAAA,CAAAC,UAAU,GAAAE,MAAA;QAClB,mBAAiB,EAAEC,QAAA,CAAAC,gBAAgB;QACpCC,WAAW,EAAC,cAAc;QACzB,kBAAgB,EAAE,KAAK;QACxBC,SAAS,EAAT,EAAS;QACRC,QAAM,EAAEJ,QAAA,CAAAK,iBAAiB;QAC1BvB,KAAK,EAAC;;QAEGQ,OAAO,EAAAC,QAAA,CAChB,CAGM;UAJce;QAAI,OACxBrB,mBAAA,CAGM,OAHNsB,UAGM,GAFJtB,mBAAA,CAA6D,OAA7DuB,UAA6D,EAAAC,gBAAA,CAAxCH,IAAI,CAACI,YAAY,CAACC,KAAK,0BAC5C1B,mBAAA,CAAiE,OAAjE2B,UAAiE,EAAAH,gBAAA,CAAzCT,QAAA,CAAAa,aAAa,CAACP,IAAI,CAACI,YAAY,kB;QAjBvEI,CAAA;;MAAAA,CAAA;QAsBQ3B,YAAA,CAiBSK,iBAAA;MAjBAC,IAAI,EAAE;IAAC;MAtBxBH,OAAA,EAAAC,QAAA,CAuBU,MAekB,CAflBJ,YAAA,CAekBO,0BAAA;QAtC5BC,UAAA,EAwBuBC,KAAA,CAAAmB,QAAQ;QAxB/B,uBAAAjB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAwBuBH,KAAA,CAAAmB,QAAQ,GAAAhB,MAAA;QAChB,mBAAiB,EAAEC,QAAA,CAAAC,gBAAgB;QACpCC,WAAW,EAAC,cAAc;QACzB,kBAAgB,EAAE,KAAK;QACxBC,SAAS,EAAT,EAAS;QACRC,QAAM,EAAEJ,QAAA,CAAAgB,eAAe;QACxBlC,KAAK,EAAC;;QAEGQ,OAAO,EAAAC,QAAA,CAChB,CAGM;UAJce;QAAI,OACxBrB,mBAAA,CAGM,OAHNgC,UAGM,GAFJhC,mBAAA,CAA6D,OAA7DiC,UAA6D,EAAAT,gBAAA,CAAxCH,IAAI,CAACI,YAAY,CAACC,KAAK,0BAC5C1B,mBAAA,CAAiE,OAAjEkC,UAAiE,EAAAV,gBAAA,CAAzCT,QAAA,CAAAa,aAAa,CAACP,IAAI,CAACI,YAAY,kB;QAnCvEI,CAAA;;MAAAA,CAAA;QAwCQ3B,YAAA,CAESK,iBAAA;MAFAC,IAAI,EAAE;IAAC;MAxCxBH,OAAA,EAAAC,QAAA,CAyCU,MAA+D,CAA/DJ,YAAA,CAA+DiC,oBAAA;QAApDC,IAAI,EAAC,SAAS;QAAEC,OAAK,EAAEtB,QAAA,CAAAuB;;QAzC5CjC,OAAA,EAAAC,QAAA,CAyCyD,MAAIO,MAAA,QAAAA,MAAA,OAzC7D0B,gBAAA,CAyCyD,MAAI,E;QAzC7DV,CAAA;;MAAAA,CAAA;;IAAAA,CAAA;kCA6CI7B,mBAAA,CAAqC;IAAhCwC,EAAE,EAAC,KAAK;IAAC3C,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}