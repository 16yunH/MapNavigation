{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      map: null,\n      startId: '',\n      goalId: ''\n    };\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    initMap() {\n      // Initialize the map\n      this.map = L.map(this.$refs.map).setView([0, 0], 1);\n\n      // Add a tile layer (e.g., OpenStreetMap)\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors',\n        maxZoom: 18\n      }).addTo(this.map);\n    },\n    async findShortestPath() {\n      try {\n        const response = await axios.post('/shortest_path', {\n          startId: this.startId,\n          goalId: this.goalId\n        });\n\n        // Clear previous path if any\n        if (this.pathLayer) {\n          this.map.removeLayer(this.pathLayer);\n        }\n\n        // Extract the path from the response\n        const path = response.data.path;\n\n        // Draw the path on the map\n        this.pathLayer = L.polyline(path.map(node => [node.lat, node.lon])).addTo(this.map);\n\n        // Fit the map bounds to the path\n        this.map.fitBounds(this.pathLayer.getBounds());\n      } catch (error) {\n        console.error('Error finding shortest path:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["L","axios","data","map","startId","goalId","mounted","initMap","methods","$refs","setView","tileLayer","attribution","maxZoom","addTo","findShortestPath","response","post","pathLayer","removeLayer","path","polyline","node","lat","lon","fitBounds","getBounds","error","console"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapview.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <div class=\"map\" ref=\"map\"></div>\r\n    <div class=\"controls\">\r\n      <input type=\"text\" v-model=\"startId\" placeholder=\"Enter start node ID\">\r\n      <input type=\"text\" v-model=\"goalId\" placeholder=\"Enter goal node ID\">\r\n      <button @click=\"findShortestPath\">Find Shortest Path</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      map: null,\r\n      startId: '',\r\n      goalId: '',\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // Initialize the map\r\n      this.map = L.map(this.$refs.map).setView([0, 0], 1);\r\n\r\n      // Add a tile layer (e.g., OpenStreetMap)\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors',\r\n        maxZoom: 18,\r\n      }).addTo(this.map);\r\n    },\r\n    async findShortestPath() {\r\n      try {\r\n        const response = await axios.post('/shortest_path', {\r\n          startId: this.startId,\r\n          goalId: this.goalId,\r\n        });\r\n\r\n        // Clear previous path if any\r\n        if (this.pathLayer) {\r\n          this.map.removeLayer(this.pathLayer);\r\n        }\r\n\r\n        // Extract the path from the response\r\n        const path = response.data.path;\r\n\r\n        // Draw the path on the map\r\n        this.pathLayer = L.polyline(path.map(node => [node.lat, node.lon])).addTo(this.map);\r\n\r\n        // Fit the map bounds to the path\r\n        this.map.fitBounds(this.pathLayer.getBounds());\r\n      } catch (error) {\r\n        console.error('Error finding shortest path:', error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.map-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n}\r\n\r\n.map {\r\n  flex: 1;\r\n}\r\n\r\n.controls {\r\n  padding: 10px;\r\n}\r\n</style>"],"mappings":";AAYA,OAAOA,CAAA,MAAO,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;EAChB,CAAC;EACDC,OAAO,EAAE;IACPD,OAAOA,CAAA,EAAG;MACR;MACA,IAAI,CAACJ,GAAE,GAAIH,CAAC,CAACG,GAAG,CAAC,IAAI,CAACM,KAAK,CAACN,GAAG,CAAC,CAACO,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;;MAEnD;MACAV,CAAC,CAACW,SAAS,CAAC,oDAAoD,EAAE;QAChEC,WAAW,EAAE,yFAAyF;QACtGC,OAAO,EAAE;MACX,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAACX,GAAG,CAAC;IACpB,CAAC;IACD,MAAMY,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMf,KAAK,CAACgB,IAAI,CAAC,gBAAgB,EAAE;UAClDb,OAAO,EAAE,IAAI,CAACA,OAAO;UACrBC,MAAM,EAAE,IAAI,CAACA;QACf,CAAC,CAAC;;QAEF;QACA,IAAI,IAAI,CAACa,SAAS,EAAE;UAClB,IAAI,CAACf,GAAG,CAACgB,WAAW,CAAC,IAAI,CAACD,SAAS,CAAC;QACtC;;QAEA;QACA,MAAME,IAAG,GAAIJ,QAAQ,CAACd,IAAI,CAACkB,IAAI;;QAE/B;QACA,IAAI,CAACF,SAAQ,GAAIlB,CAAC,CAACqB,QAAQ,CAACD,IAAI,CAACjB,GAAG,CAACmB,IAAG,IAAK,CAACA,IAAI,CAACC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,CAAC,CAACV,KAAK,CAAC,IAAI,CAACX,GAAG,CAAC;;QAEnF;QACA,IAAI,CAACA,GAAG,CAACsB,SAAS,CAAC,IAAI,CAACP,SAAS,CAACQ,SAAS,CAAC,CAAC,CAAC;MAChD,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}