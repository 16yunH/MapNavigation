{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\n// 导入所需的组件和样式\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { ElMessage } from 'element-plus';\nimport 'element-plus/dist/index.css';\nexport default {\n  name: 'OsmMap',\n  data() {\n    return {\n      map: null,\n      startPoint: '',\n      // 起点输入值\n      endPoint: '',\n      // 终点输入值\n      startMarker: null,\n      // 起点标记\n      endMarker: null,\n      // 终点标记\n      routePath: null,\n      // 路径线\n      // 测试用的节点ID映射\n      nodeMapping: {\n        '你好': 2845789961,\n        '再见': 946031310\n      }\n    };\n  },\n  mounted() {\n    // 组件挂载后初始化地图\n    this.initMap();\n  },\n  methods: {\n    initMap() {\n      const options = {\n        center: [31.500000, 121.750000],\n        minZoom: 0,\n        maxZoom: 18,\n        zoom: 10,\n        zoomControl: true,\n        doubleClickZoom: true,\n        dragging: true,\n        boxZoom: true,\n        scrollWheelZoom: true,\n        zoomSnap: 0.5,\n        fullscreenControl: true\n      };\n\n      // 初始化地图实例\n      this.map = L.map('map', options);\n\n      // 添加底图图层\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: 'Map data © <a href=\"https://www.openstreetmap.org\">OpenStreetMap</a> contributors'\n      }).addTo(this.map);\n    },\n    // 清除地图上的标记和路径\n    clearMap() {\n      if (this.startMarker) this.map.removeLayer(this.startMarker);\n      if (this.endMarker) this.map.removeLayer(this.endMarker);\n      if (this.routePath) this.map.removeLayer(this.routePath);\n    },\n    // 搜索路线并在地图上显示\n    async searchRoute() {\n      try {\n        // 检查输入是否完整\n        if (!this.startPoint || !this.endPoint) {\n          ElMessage.warning('请输入起点和终点');\n          return;\n        }\n\n        // 获取节点ID\n        const startId = this.nodeMapping[this.startPoint];\n        const endId = this.nodeMapping[this.endPoint];\n        if (!startId || !endId) {\n          ElMessage.warning('找不到对应的地点，请检查输入');\n          return;\n        }\n\n        // 发起路径查找请求\n        const response = await fetch('http://localhost:18080/route', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            start_id: startId,\n            end_id: endId\n          })\n        });\n        if (!response.ok) {\n          throw new Error('路径查找失败');\n        }\n        const data = await response.json();\n\n        // 清除之前的标记和路径\n        this.clearMap();\n\n        // 绘制新的路径\n        if (data.path && data.path.length > 0) {\n          // 添加起终点标记\n          this.startMarker = L.marker(data.path[0]).addTo(this.map);\n          this.endMarker = L.marker(data.path[data.path.length - 1]).addTo(this.map);\n\n          // 绘制路径线\n          this.routePath = L.polyline(data.path, {\n            color: 'blue',\n            weight: 3,\n            opacity: 0.7\n          }).addTo(this.map);\n\n          // 调整地图视野以显示完整路径\n          this.map.fitBounds(this.routePath.getBounds(), {\n            padding: [50, 50]\n          });\n          ElMessage.success('路径已显示');\n        } else {\n          ElMessage.warning('未找到可行路径');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        ElMessage.error('查找路径时出错，请重试');\n      }\n    }\n  }\n};","map":{"version":3,"names":["L","ElMessage","name","data","map","startPoint","endPoint","startMarker","endMarker","routePath","nodeMapping","mounted","initMap","methods","options","center","minZoom","maxZoom","zoom","zoomControl","doubleClickZoom","dragging","boxZoom","scrollWheelZoom","zoomSnap","fullscreenControl","tileLayer","attribution","addTo","clearMap","removeLayer","searchRoute","warning","startId","endId","response","fetch","method","headers","body","JSON","stringify","start_id","end_id","ok","Error","json","path","length","marker","polyline","color","weight","opacity","fitBounds","getBounds","padding","success","error","console"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapview.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 搜索框容器，使用 Element Plus 的栅格系统使布局更加灵活 -->\r\n    <div class=\"search-container\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"9\">\r\n          <el-input\r\n              v-model=\"startPoint\"\r\n              placeholder=\"请输入起点\"\r\n              clearable\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"9\">\r\n          <el-input\r\n              v-model=\"endPoint\"\r\n              placeholder=\"请输入终点\"\r\n              clearable\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-button type=\"primary\" @click=\"searchRoute\">查找路线</el-button>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n\r\n    <!-- 地图容器 -->\r\n    <div id=\"map\" class=\"map-view\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 导入所需的组件和样式\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { ElMessage } from 'element-plus'\r\nimport 'element-plus/dist/index.css'\r\n\r\nexport default {\r\n  name: 'OsmMap',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      startPoint: '',    // 起点输入值\r\n      endPoint: '',      // 终点输入值\r\n      startMarker: null, // 起点标记\r\n      endMarker: null,   // 终点标记\r\n      routePath: null,   // 路径线\r\n      // 测试用的节点ID映射\r\n      nodeMapping: {\r\n        '你好': 2845789961,\r\n        '再见': 946031310,\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    // 组件挂载后初始化地图\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      const options = {\r\n        center: [31.500000, 121.750000],\r\n        minZoom: 0,\r\n        maxZoom: 18,\r\n        zoom: 10,\r\n        zoomControl: true,\r\n        doubleClickZoom: true,\r\n        dragging: true,\r\n        boxZoom: true,\r\n        scrollWheelZoom: true,\r\n        zoomSnap: 0.5,\r\n        fullscreenControl: true,\r\n      };\r\n\r\n      // 初始化地图实例\r\n      this.map = L.map('map', options);\r\n\r\n      // 添加底图图层\r\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n        attribution: 'Map data © <a href=\"https://www.openstreetmap.org\">OpenStreetMap</a> contributors',\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    // 清除地图上的标记和路径\r\n    clearMap() {\r\n      if (this.startMarker) this.map.removeLayer(this.startMarker);\r\n      if (this.endMarker) this.map.removeLayer(this.endMarker);\r\n      if (this.routePath) this.map.removeLayer(this.routePath);\r\n    },\r\n\r\n    // 搜索路线并在地图上显示\r\n    async searchRoute() {\r\n      try {\r\n        // 检查输入是否完整\r\n        if (!this.startPoint || !this.endPoint) {\r\n          ElMessage.warning('请输入起点和终点');\r\n          return;\r\n        }\r\n\r\n        // 获取节点ID\r\n        const startId = this.nodeMapping[this.startPoint];\r\n        const endId = this.nodeMapping[this.endPoint];\r\n\r\n        if (!startId || !endId) {\r\n          ElMessage.warning('找不到对应的地点，请检查输入');\r\n          return;\r\n        }\r\n\r\n        // 发起路径查找请求\r\n        const response = await fetch('http://localhost:18080/route', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            start_id: startId,\r\n            end_id: endId\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('路径查找失败');\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // 清除之前的标记和路径\r\n        this.clearMap();\r\n\r\n        // 绘制新的路径\r\n        if (data.path && data.path.length > 0) {\r\n          // 添加起终点标记\r\n          this.startMarker = L.marker(data.path[0]).addTo(this.map);\r\n          this.endMarker = L.marker(data.path[data.path.length - 1]).addTo(this.map);\r\n\r\n          // 绘制路径线\r\n          this.routePath = L.polyline(data.path, {\r\n            color: 'blue',\r\n            weight: 3,\r\n            opacity: 0.7\r\n          }).addTo(this.map);\r\n\r\n          // 调整地图视野以显示完整路径\r\n          this.map.fitBounds(this.routePath.getBounds(), {\r\n            padding: [50, 50]\r\n          });\r\n\r\n          ElMessage.success('路径已显示');\r\n        } else {\r\n          ElMessage.warning('未找到可行路径');\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        ElMessage.error('查找路径时出错，请重试');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.map-container {\r\n  position: relative;\r\n  height: 100vh;\r\n  width: 100%;\r\n}\r\n\r\n.map-view {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.search-container {\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 1000;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  width: 80%;\r\n  max-width: 800px;\r\n}\r\n\r\n/* 确保输入框在移动设备上也能正常显示 */\r\n@media (max-width: 768px) {\r\n  .search-container {\r\n    width: 90%;\r\n    padding: 15px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}