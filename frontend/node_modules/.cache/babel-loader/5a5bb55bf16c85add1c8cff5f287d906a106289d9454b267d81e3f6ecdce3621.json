{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"map-container\"\n};\nconst _hoisted_2 = {\n  class: \"search-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_autocomplete = _resolveComponent(\"el-autocomplete\");\n  const _component_el_col = _resolveComponent(\"el-col\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 搜索控件容器 \"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_el_row, {\n    gutter: 20\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_autocomplete, {\n        modelValue: $data.startPoint,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.startPoint = $event),\n        \"fetch-suggestions\": $options.querySearch,\n        placeholder: \"请输入起点\",\n        clearable: \"\",\n        onSelect: $options.handleStartSelect,\n        class: \"full-width\"\n      }, null, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 9\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_autocomplete, {\n        modelValue: $data.endPoint,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.endPoint = $event),\n        \"fetch-suggestions\": $options.querySearch,\n        placeholder: \"请输入终点\",\n        clearable: \"\",\n        onSelect: $options.handleEndSelect,\n        class: \"full-width\"\n      }, null, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_col, {\n      span: 6\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.searchRoute\n      }, {\n        default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"查找路线\")])),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]), _createCommentVNode(\" 地图容器 \"), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    id: \"map\",\n    class: \"map-view\"\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_createVNode","_component_el_row","gutter","default","_withCtx","_component_el_col","span","_component_el_autocomplete","modelValue","$data","startPoint","_cache","$event","$options","querySearch","placeholder","clearable","onSelect","handleStartSelect","_","endPoint","handleEndSelect","_component_el_button","type","onClick","searchRoute","_createTextVNode","id"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapview.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 搜索控件容器 -->\r\n    <div class=\"search-container\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"9\">\r\n          <el-autocomplete\r\n              v-model=\"startPoint\"\r\n              :fetch-suggestions=\"querySearch\"\r\n              placeholder=\"请输入起点\"\r\n              clearable\r\n              @select=\"handleStartSelect\"\r\n              class=\"full-width\"\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"9\">\r\n          <el-autocomplete\r\n              v-model=\"endPoint\"\r\n              :fetch-suggestions=\"querySearch\"\r\n              placeholder=\"请输入终点\"\r\n              clearable\r\n              @select=\"handleEndSelect\"\r\n              class=\"full-width\"\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-button type=\"primary\" @click=\"searchRoute\">查找路线</el-button>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n\r\n    <!-- 地图容器 -->\r\n    <div id=\"map\" class=\"map-view\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { ElMessage } from 'element-plus';\r\nimport 'element-plus/dist/index.css';\r\n\r\nexport default {\r\n  name: 'OsmMap',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      startPoint: '',\r\n      endPoint: '',\r\n      startMarker: null,\r\n      endMarker: null,\r\n      routePath: null,\r\n      tileLayer: null,  // 保存底图图层的引用\r\n      locations: [\r\n        { value: '松江大学城', nodeId: 2845789961, location: [31.500000, 121.750000] },\r\n        { value: '松江南站', nodeId: 946031310, location: [31.510000, 121.760000] },\r\n        { value: '泗泾镇', nodeId: 123456789, location: [31.520000, 121.770000] },\r\n        { value: '松江体育中心', nodeId: 987654321, location: [31.530000, 121.780000] },\r\n        { value: '松江大学城地铁站', nodeId: 456789123, location: [31.540000, 121.790000] }\r\n      ],\r\n      selectedStartLocation: null,\r\n      selectedEndLocation: null\r\n    };\r\n  },\r\n  mounted() {\r\n    // 组件挂载后初始化地图\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // 创建地图实例，设置初始视图位置和缩放级别\r\n      this.map = L.map('map', {\r\n        center: [31.500000, 121.750000],  // 松江区的大致位置\r\n        zoom: 13,\r\n        minZoom: 3,\r\n        maxZoom: 18,\r\n        zoomControl: true,\r\n        doubleClickZoom: true,\r\n        scrollWheelZoom: true\r\n      });\r\n\r\n      // 添加 OSM 底图\r\n      this.tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '© OpenStreetMap contributors',  // 底图的版权信息\r\n        maxZoom: 18,  // 最大缩放级别\r\n        tileSize: 256,  // 瓦片大小\r\n        zoomOffset: 0,  // 缩放偏移\r\n        // 可以添加子域名来提高加载性能\r\n        subdomains: ['a', 'b', 'c']\r\n      }).addTo(this.map);\r\n\r\n      // 添加比例尺控件\r\n      L.control.scale({\r\n        imperial: false  // 只显示公制单位\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    querySearch(queryString, callback) {\r\n      const results = queryString\r\n          ? this.locations.filter(location =>\r\n              location.value.toLowerCase().includes(queryString.toLowerCase())\r\n          )\r\n          : this.locations;\r\n\r\n      callback(results);\r\n    },\r\n\r\n    handleStartSelect(item) {\r\n      this.selectedStartLocation = item;\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      this.startMarker = L.marker(item.location)\r\n          .addTo(this.map)\r\n          .bindPopup(`起点：${item.value}`)\r\n          .openPopup();\r\n\r\n      // 平滑地将地图视图移动到选中位置\r\n      this.map.flyTo(item.location, 15, {\r\n        duration: 1.5,  // 动画持续时间（秒）\r\n        easeLinearity: 0.25\r\n      });\r\n    },\r\n\r\n    handleEndSelect(item) {\r\n      this.selectedEndLocation = item;\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      this.endMarker = L.marker(item.location)\r\n          .addTo(this.map)\r\n          .bindPopup(`终点：${item.value}`)\r\n          .openPopup();\r\n\r\n      this.map.flyTo(item.location, 15, {\r\n        duration: 1.5,\r\n        easeLinearity: 0.25\r\n      });\r\n    },\r\n\r\n    async searchRoute() {\r\n      try {\r\n        if (!this.selectedStartLocation || !this.selectedEndLocation) {\r\n          ElMessage.warning('请从提示列表中选择起点和终点');\r\n          return;\r\n        }\r\n\r\n        const response = await fetch('http://localhost:18080/route', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            start_id: this.selectedStartLocation.nodeId,\r\n            end_id: this.selectedEndLocation.nodeId\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // 清除现有路径\r\n        if (this.routePath) {\r\n          this.map.removeLayer(this.routePath);\r\n        }\r\n\r\n        if (data.path && data.path.length > 0) {\r\n          // 绘制新路径，使用虚线样式使路径更醒目\r\n          this.routePath = L.polyline(data.path, {\r\n            color: '#3388ff',\r\n            weight: 6,\r\n            opacity: 0.8,\r\n            dashArray: '10, 10',  // 创建虚线效果\r\n            lineJoin: 'round'  // 路径拐角圆滑处理\r\n          }).addTo(this.map);\r\n\r\n          // 调整地图视野以显示完整路径\r\n          const bounds = this.routePath.getBounds();\r\n          this.map.fitBounds(bounds, {\r\n            padding: [50, 50],\r\n            maxZoom: 16,  // 限制最大缩放级别\r\n            animate: true,  // 启用动画\r\n            duration: 1.0  // 动画持续时间\r\n          });\r\n\r\n          ElMessage.success('已找到最短路径');\r\n        } else {\r\n          ElMessage.warning('未找到可行路径');\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        ElMessage.error('路径查找失败，请重试');\r\n      }\r\n    },\r\n\r\n    clearMap() {\r\n      if (this.startMarker) this.map.removeLayer(this.startMarker);\r\n      if (this.endMarker) this.map.removeLayer(this.endMarker);\r\n      if (this.routePath) this.map.removeLayer(this.routePath);\r\n\r\n      this.startMarker = null;\r\n      this.endMarker = null;\r\n      this.routePath = null;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.map-container {\r\n  position: relative;\r\n  height: 100vh;\r\n  width: 100%;\r\n}\r\n\r\n.map-view {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.search-container {\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 1000;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px rgba(0,0,0,0.1);\r\n  width: 80%;\r\n  max-width: 800px;\r\n}\r\n\r\n.full-width {\r\n  width: 100%;\r\n}\r\n\r\n/* 确保建议列表始终显示在地图上方 */\r\n:deep(.el-autocomplete-suggestion) {\r\n  z-index: 1001 !important;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .search-container {\r\n    width: 90%;\r\n    padding: 15px;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAEnBA,KAAK,EAAC;AAAkB;;;;;;uBAF/BC,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BJC,mBAAA,YAAe,EACfC,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJC,YAAA,CAwBSC,iBAAA;IAxBAC,MAAM,EAAE;EAAE;IAJzBC,OAAA,EAAAC,QAAA,CAKQ,MASS,CATTJ,YAAA,CASSK,iBAAA;MATAC,IAAI,EAAE;IAAC;MALxBH,OAAA,EAAAC,QAAA,CAMU,MAOE,CAPFJ,YAAA,CAOEO,0BAAA;QAbZC,UAAA,EAOuBC,KAAA,CAAAC,UAAU;QAPjC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOuBH,KAAA,CAAAC,UAAU,GAAAE,MAAA;QAClB,mBAAiB,EAAEC,QAAA,CAAAC,WAAW;QAC/BC,WAAW,EAAC,OAAO;QACnBC,SAAS,EAAT,EAAS;QACRC,QAAM,EAAEJ,QAAA,CAAAK,iBAAiB;QAC1BxB,KAAK,EAAC;;MAZpByB,CAAA;QAeQnB,YAAA,CASSK,iBAAA;MATAC,IAAI,EAAE;IAAC;MAfxBH,OAAA,EAAAC,QAAA,CAgBU,MAOE,CAPFJ,YAAA,CAOEO,0BAAA;QAvBZC,UAAA,EAiBuBC,KAAA,CAAAW,QAAQ;QAjB/B,uBAAAT,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAiBuBH,KAAA,CAAAW,QAAQ,GAAAR,MAAA;QAChB,mBAAiB,EAAEC,QAAA,CAAAC,WAAW;QAC/BC,WAAW,EAAC,OAAO;QACnBC,SAAS,EAAT,EAAS;QACRC,QAAM,EAAEJ,QAAA,CAAAQ,eAAe;QACxB3B,KAAK,EAAC;;MAtBpByB,CAAA;QAyBQnB,YAAA,CAESK,iBAAA;MAFAC,IAAI,EAAE;IAAC;MAzBxBH,OAAA,EAAAC,QAAA,CA0BU,MAA+D,CAA/DJ,YAAA,CAA+DsB,oBAAA;QAApDC,IAAI,EAAC,SAAS;QAAEC,OAAK,EAAEX,QAAA,CAAAY;;QA1B5CtB,OAAA,EAAAC,QAAA,CA0ByD,MAAIO,MAAA,QAAAA,MAAA,OA1B7De,gBAAA,CA0ByD,MAAI,E;QA1B7DP,CAAA;;MAAAA,CAAA;;IAAAA,CAAA;QA+BItB,mBAAA,UAAa,E,0BACbC,mBAAA,CAAqC;IAAhC6B,EAAE,EAAC,KAAK;IAACjC,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}