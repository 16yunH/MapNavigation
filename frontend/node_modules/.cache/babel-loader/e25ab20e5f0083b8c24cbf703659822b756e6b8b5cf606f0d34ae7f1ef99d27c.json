{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { ElMessage } from 'element-plus';\nimport 'element-plus/dist/index.css';\nexport default {\n  name: 'MapView',\n  data() {\n    return {\n      map: null,\n      startPoint: '',\n      endPoint: '',\n      startMarker: null,\n      endMarker: null,\n      routePath: null,\n      tileLayer: null,\n      bounds: {\n        minLat: 28.2817100,\n        minLon: 117.1911600,\n        maxLat: 28.3225200,\n        maxLon: 117.2551900\n      }\n    };\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    initMap() {\n      // 计算地图中心点\n      const centerLat = (this.bounds.minLat + this.bounds.maxLat) / 2;\n      const centerLon = (this.bounds.minLon + this.bounds.maxLon) / 2;\n\n      // 初始化地图\n      this.map = L.map('map', {\n        center: [centerLat, centerLon],\n        zoom: 15,\n        minZoom: 14,\n        maxZoom: 18,\n        zoomControl: true,\n        doubleClickZoom: true,\n        scrollWheelZoom: true\n      });\n\n      // 添加 OSM 底图\n      this.tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n        maxZoom: 18,\n        tileSize: 256\n      }).addTo(this.map);\n\n      // 设置地图边界\n      const bounds = L.latLngBounds([this.bounds.minLat, this.bounds.minLon], [this.bounds.maxLat, this.bounds.maxLon]);\n      this.map.setMaxBounds(bounds);\n\n      // 添加比例尺\n      L.control.scale({\n        imperial: false\n      }).addTo(this.map);\n    },\n    async searchRoute() {\n      try {\n        // 验证输入\n        if (!this.startPoint || !this.endPoint) {\n          ElMessage.warning('请输入起点和终点ID');\n          return;\n        }\n\n        // 发送请求到后端\n        const response = await fetch('http://localhost:18080/route', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            start_id: parseInt(this.startPoint),\n            end_id: parseInt(this.endPoint)\n          })\n        });\n        if (!response.ok) {\n          throw new Error('路径查找失败');\n        }\n        const data = await response.json();\n\n        // 清除现有的路径\n        this.clearMap();\n        if (data.path && data.path.length > 0) {\n          // 绘制路径线\n          this.routePath = L.polyline(data.path, {\n            color: '#3388ff',\n            weight: 6,\n            opacity: 0.8,\n            lineJoin: 'round'\n          }).addTo(this.map);\n\n          // 添加起点和终点标记\n          this.startMarker = L.marker(data.path[0]).addTo(this.map).bindPopup('起点').openPopup();\n          this.endMarker = L.marker(data.path[data.path.length - 1]).addTo(this.map).bindPopup('终点').openPopup();\n\n          // 调整地图视野以显示完整路径\n          this.map.fitBounds(this.routePath.getBounds(), {\n            padding: [50, 50]\n          });\n          ElMessage.success('路径已显示');\n        } else {\n          ElMessage.warning('未找到可行路径');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        ElMessage.error('路径查找失败，请重试');\n      }\n    },\n    clearMap() {\n      if (this.startMarker) this.map.removeLayer(this.startMarker);\n      if (this.endMarker) this.map.removeLayer(this.endMarker);\n      if (this.routePath) this.map.removeLayer(this.routePath);\n    }\n  }\n};","map":{"version":3,"names":["L","ElMessage","name","data","map","startPoint","endPoint","startMarker","endMarker","routePath","tileLayer","bounds","minLat","minLon","maxLat","maxLon","mounted","initMap","methods","centerLat","centerLon","center","zoom","minZoom","maxZoom","zoomControl","doubleClickZoom","scrollWheelZoom","attribution","tileSize","addTo","latLngBounds","setMaxBounds","control","scale","imperial","searchRoute","warning","response","fetch","method","headers","body","JSON","stringify","start_id","parseInt","end_id","ok","Error","json","clearMap","path","length","polyline","color","weight","opacity","lineJoin","marker","bindPopup","openPopup","fitBounds","getBounds","padding","success","error","console","removeLayer"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapview.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 搜索控件容器 -->\r\n    <div class=\"search-container\">\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"9\">\r\n          <el-input\r\n              v-model=\"startPoint\"\r\n              placeholder=\"请输入起点ID\"\r\n              clearable\r\n              class=\"full-width\"\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"9\">\r\n          <el-input\r\n              v-model=\"endPoint\"\r\n              placeholder=\"请输入终点ID\"\r\n              clearable\r\n              class=\"full-width\"\r\n          />\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n          <el-button type=\"primary\" @click=\"searchRoute\">查找路线</el-button>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n\r\n    <!-- 地图容器 -->\r\n    <div id=\"map\" class=\"map-view\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { ElMessage } from 'element-plus';\r\nimport 'element-plus/dist/index.css';\r\n\r\nexport default {\r\n  name: 'MapView',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      startPoint: '',\r\n      endPoint: '',\r\n      startMarker: null,\r\n      endMarker: null,\r\n      routePath: null,\r\n      tileLayer: null,\r\n      bounds: {\r\n        minLat: 28.2817100,\r\n        minLon: 117.1911600,\r\n        maxLat: 28.3225200,\r\n        maxLon: 117.2551900\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      // 计算地图中心点\r\n      const centerLat = (this.bounds.minLat + this.bounds.maxLat) / 2;\r\n      const centerLon = (this.bounds.minLon + this.bounds.maxLon) / 2;\r\n\r\n      // 初始化地图\r\n      this.map = L.map('map', {\r\n        center: [centerLat, centerLon],\r\n        zoom: 15,\r\n        minZoom: 14,\r\n        maxZoom: 18,\r\n        zoomControl: true,\r\n        doubleClickZoom: true,\r\n        scrollWheelZoom: true\r\n      });\r\n\r\n      // 添加 OSM 底图\r\n      this.tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '© OpenStreetMap contributors',\r\n        maxZoom: 18,\r\n        tileSize: 256\r\n      }).addTo(this.map);\r\n\r\n      // 设置地图边界\r\n      const bounds = L.latLngBounds(\r\n          [this.bounds.minLat, this.bounds.minLon],\r\n          [this.bounds.maxLat, this.bounds.maxLon]\r\n      );\r\n      this.map.setMaxBounds(bounds);\r\n\r\n      // 添加比例尺\r\n      L.control.scale({ imperial: false }).addTo(this.map);\r\n    },\r\n\r\n    async searchRoute() {\r\n      try {\r\n        // 验证输入\r\n        if (!this.startPoint || !this.endPoint) {\r\n          ElMessage.warning('请输入起点和终点ID');\r\n          return;\r\n        }\r\n\r\n        // 发送请求到后端\r\n        const response = await fetch('http://localhost:18080/route', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            start_id: parseInt(this.startPoint),\r\n            end_id: parseInt(this.endPoint)\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('路径查找失败');\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // 清除现有的路径\r\n        this.clearMap();\r\n\r\n        if (data.path && data.path.length > 0) {\r\n          // 绘制路径线\r\n          this.routePath = L.polyline(data.path, {\r\n            color: '#3388ff',\r\n            weight: 6,\r\n            opacity: 0.8,\r\n            lineJoin: 'round'\r\n          }).addTo(this.map);\r\n\r\n          // 添加起点和终点标记\r\n          this.startMarker = L.marker(data.path[0]).addTo(this.map)\r\n              .bindPopup('起点').openPopup();\r\n          this.endMarker = L.marker(data.path[data.path.length - 1]).addTo(this.map)\r\n              .bindPopup('终点').openPopup();\r\n\r\n          // 调整地图视野以显示完整路径\r\n          this.map.fitBounds(this.routePath.getBounds(), {\r\n            padding: [50, 50]\r\n          });\r\n\r\n          ElMessage.success('路径已显示');\r\n        } else {\r\n          ElMessage.warning('未找到可行路径');\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n        ElMessage.error('路径查找失败，请重试');\r\n      }\r\n    },\r\n\r\n    clearMap() {\r\n      if (this.startMarker) this.map.removeLayer(this.startMarker);\r\n      if (this.endMarker) this.map.removeLayer(this.endMarker);\r\n      if (this.routePath) this.map.removeLayer(this.routePath);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.map-container {\r\n  position: relative;\r\n  height: 100vh;\r\n  width: 100%;\r\n}\r\n\r\n.map-view {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.search-container {\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 1000;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px rgba(0,0,0,0.1);\r\n  width: 80%;\r\n  max-width: 800px;\r\n}\r\n\r\n.full-width {\r\n  width: 100%;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .search-container {\r\n    width: 90%;\r\n    padding: 15px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}