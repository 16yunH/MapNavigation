{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios';\nexport default {\n  name: 'MapNavigation',\n  data() {\n    return {\n      map: null,\n      // Leaflet地图实例\n      pathLayer: null,\n      // 路径图层\n      startPoint: null,\n      // 起点坐标\n      endPoint: null,\n      // 终点坐标\n      startMarker: null,\n      // 起点标记\n      endMarker: null,\n      // 终点标记\n      routeInfo: null,\n      // 路径信息\n      navigationMarkers: [],\n      // 导航标记数组\n      loading: false,\n      // 加载状态\n      searchQuery: '' // 用户输入的搜索查询\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.resizeMap();\n    // 监听窗口大小变化，确保地图正确显示\n    window.addEventListener('resize', this.resizeMap);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.resizeMap);\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(this.$refs.map).setView([28.3021, 117.2232], 13);\n\n      // 添加地图图层\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n        maxZoom: 19\n      }).addTo(this.map);\n\n      // 初始化高德地图插件（假设你已经通过script标签引入了高德地图API）\n      AMap.plugin(['AMap.Geocoder'], () => {\n        this.geocoder = new AMap.Geocoder({\n          city: \"全国\" // 默认是全国范围搜索\n        });\n      });\n\n      // 加载道路网络\n      this.loadRoadNetwork();\n\n      // 添加地图点击事件\n      this.map.on('click', this.handleMapClick);\n    },\n    async loadRoadNetwork() {\n      try {\n        const response = await axios.get('http://localhost:8081/roads');\n        this.drawRoads(response.data.roads);\n      } catch (error) {\n        console.error('加载道路数据失败:', error);\n      }\n    },\n    drawRoads(roads) {\n      roads.forEach(road => {\n        if (road.coordinates.length >= 2) {\n          const coordinates = road.coordinates.map(coord => [coord.lat, coord.lng]);\n          L.polyline(coordinates, {\n            color: '#ccc',\n            weight: 2,\n            opacity: 0.5\n          }).addTo(this.map);\n        }\n      });\n    },\n    handleMapClick(e) {\n      const latlng = e.latlng;\n      if (!this.startPoint) {\n        this.setStartPoint(latlng);\n      } else if (!this.endPoint) {\n        this.setEndPoint(latlng);\n      }\n    },\n    setStartPoint(latlng) {\n      this.startPoint = latlng;\n      if (this.startMarker) {\n        this.map.removeLayer(this.startMarker);\n      }\n      this.startMarker = L.marker(latlng, {\n        icon: L.divIcon({\n          className: 'custom-marker',\n          html: '<div class=\"marker-start\">起点</div>'\n        })\n      }).addTo(this.map);\n    },\n    setEndPoint(latlng) {\n      this.endPoint = latlng;\n      if (this.endMarker) {\n        this.map.removeLayer(this.endMarker);\n      }\n      this.endMarker = L.marker(latlng, {\n        icon: L.divIcon({\n          className: 'custom-marker',\n          html: '<div class=\"marker-end\">终点</div>'\n        })\n      }).addTo(this.map);\n    },\n    async findShortestPath() {\n      if (!this.startPoint || !this.endPoint) {\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await axios.post('http://localhost:8081/find_path', {\n          startLat: this.startPoint.lat,\n          startLon: this.startPoint.lng,\n          endLat: this.endPoint.lat,\n          endLon: this.endPoint.lng\n        });\n        if (response.data.success) {\n          this.clearRoute();\n          this.drawRoute(response.data);\n          this.routeInfo = response.data;\n        } else {\n          alert('未找到有效路径');\n        }\n      } catch (error) {\n        console.error('查找路径失败:', error);\n        alert('路径查找失败，请稍后重试');\n      } finally {\n        this.loading = false;\n      }\n    },\n    drawRoute(routeData) {\n      const coordinates = routeData.coordinates.map(coord => [coord.lat, coord.lng]);\n      this.pathLayer = L.polyline(coordinates, {\n        color: '#2196F3',\n        weight: 5,\n        opacity: 0.7\n      }).addTo(this.map);\n      routeData.steps.forEach((step, index) => {\n        if (step.instruction) {\n          const marker = L.marker([step.lat, step.lng], {\n            icon: L.divIcon({\n              className: 'navigation-marker',\n              html: `<div class=\"step-marker\">${index + 1}</div>`\n            })\n          }).bindPopup(`<div class=\"step-popup\">\n              <b>${step.instruction}</b><br>\n              距离: ${step.distance.toFixed(0)}米<br>\n              预计时间: ${Math.round(step.duration)}秒\n            </div>`).addTo(this.map);\n          this.navigationMarkers.push(marker);\n        }\n      });\n      this.map.fitBounds(this.pathLayer.getBounds(), {\n        padding: [50, 50]\n      });\n    },\n    clearRoute() {\n      if (this.pathLayer) {\n        this.map.removeLayer(this.pathLayer);\n      }\n      this.navigationMarkers.forEach(marker => {\n        this.map.removeLayer(marker);\n      });\n      this.navigationMarkers = [];\n      this.routeInfo = null;\n    },\n    resetPoints() {\n      if (this.startMarker) {\n        this.map.removeLayer(this.startMarker);\n      }\n      if (this.endMarker) {\n        this.map.removeLayer(this.endMarker);\n      }\n      this.clearRoute();\n      this.startPoint = null;\n      this.endPoint = null;\n      this.startMarker = null;\n      this.endMarker = null;\n    },\n    formatCoordinate(point) {\n      return `纬度: ${point.lat.toFixed(6)}, 经度: ${point.lng.toFixed(6)}`;\n    },\n    resizeMap() {\n      this.$nextTick(() => {\n        this.map?.invalidateSize();\n      });\n    },\n    async searchLocation() {\n      if (!this.searchQuery) return;\n      this.geocoder.getLocation(this.searchQuery, (status, result) => {\n        if (status === 'complete' && result.info === 'OK') {\n          const location = result.geocodes[0].location;\n          console.log('搜索结果:', location);\n\n          // 设置起点或终点\n          this.setStartPoint(location); // 或者使用 setEndPoint 如果需要设置为终点\n        } else {\n          console.error('搜索失败:', result);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["L","axios","name","data","map","pathLayer","startPoint","endPoint","startMarker","endMarker","routeInfo","navigationMarkers","loading","searchQuery","mounted","initMap","resizeMap","window","addEventListener","beforeUnmount","removeEventListener","methods","$refs","setView","tileLayer","attribution","maxZoom","addTo","AMap","plugin","geocoder","Geocoder","city","loadRoadNetwork","on","handleMapClick","response","get","drawRoads","roads","error","console","forEach","road","coordinates","length","coord","lat","lng","polyline","color","weight","opacity","e","latlng","setStartPoint","setEndPoint","removeLayer","marker","icon","divIcon","className","html","findShortestPath","post","startLat","startLon","endLat","endLon","success","clearRoute","drawRoute","alert","routeData","steps","step","index","instruction","bindPopup","distance","toFixed","Math","round","duration","push","fitBounds","getBounds","padding","resetPoints","formatCoordinate","point","$nextTick","invalidateSize","searchLocation","getLocation","status","result","info","location","geocodes","log"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapView.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 搜索框 -->\r\n    <div class=\"search-container\">\r\n      <input type=\"text\" v-model=\"searchQuery\" placeholder=\"请输入地名\" @keyup.enter=\"searchLocation\" />\r\n      <button @click=\"searchLocation\">搜索</button>\r\n    </div>\r\n\r\n    <!-- 控制面板 -->\r\n    <div class=\"controls\">\r\n      <!-- 起点和终点信息显示 -->\r\n      <div v-if=\"startPoint\" class=\"coordinate-info\">\r\n        起点: {{ formatCoordinate(startPoint) }}\r\n      </div>\r\n      <div v-if=\"endPoint\" class=\"coordinate-info\">\r\n        终点: {{ formatCoordinate(endPoint) }}\r\n      </div>\r\n\r\n      <!-- 操作按钮 -->\r\n      <button\r\n          v-if=\"startPoint && endPoint\"\r\n          @click=\"findShortestPath\"\r\n          class=\"action-button\"\r\n      >\r\n        查找最短路径\r\n      </button>\r\n      <button\r\n          @click=\"resetPoints\"\r\n          class=\"action-button\"\r\n      >\r\n        重置选择点\r\n      </button>\r\n\r\n      <!-- 操作说明 -->\r\n      <div class=\"instruction-panel\" v-if=\"!startPoint || !endPoint\">\r\n        {{ !startPoint ? '请点击地图选择起点' : '请点击地图选择终点' }}\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 地图容器 -->\r\n    <div class=\"map\" ref=\"map\"></div>\r\n\r\n    <!-- 路径信息面板 -->\r\n    <div v-if=\"routeInfo\" class=\"route-info-panel\">\r\n      <h3>路径信息</h3>\r\n      <div class=\"route-summary\">\r\n        <div>总距离: {{ (routeInfo.totalDistance/1000).toFixed(2) }}公里</div>\r\n        <div>预计用时: {{ Math.round(routeInfo.totalDuration/60) }}分钟</div>\r\n      </div>\r\n      <div class=\"route-steps\">\r\n        <h4>导航步骤:</h4>\r\n        <ol>\r\n          <li v-for=\"(step, index) in routeInfo.steps\" :key=\"index\">\r\n            {{ step.instruction }}\r\n            <div class=\"step-details\">\r\n              {{ (step.distance).toFixed(0) }}米 |\r\n              {{ Math.round(step.duration) }}秒\r\n            </div>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'MapNavigation',\r\n\r\n  data() {\r\n    return {\r\n      map: null,             // Leaflet地图实例\r\n      pathLayer: null,       // 路径图层\r\n      startPoint: null,      // 起点坐标\r\n      endPoint: null,        // 终点坐标\r\n      startMarker: null,     // 起点标记\r\n      endMarker: null,       // 终点标记\r\n      routeInfo: null,       // 路径信息\r\n      navigationMarkers: [], // 导航标记数组\r\n      loading: false,        // 加载状态\r\n      searchQuery: '',       // 用户输入的搜索查询\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.initMap();\r\n    this.resizeMap();\r\n    // 监听窗口大小变化，确保地图正确显示\r\n    window.addEventListener('resize', this.resizeMap);\r\n  },\r\n\r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.resizeMap);\r\n  },\r\n\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map(this.$refs.map).setView([28.3021, 117.2232], 13);\r\n\r\n      // 添加地图图层\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '© OpenStreetMap contributors',\r\n        maxZoom: 19\r\n      }).addTo(this.map);\r\n\r\n      // 初始化高德地图插件（假设你已经通过script标签引入了高德地图API）\r\n      AMap.plugin(['AMap.Geocoder'], () => {\r\n        this.geocoder = new AMap.Geocoder({\r\n          city: \"全国\", // 默认是全国范围搜索\r\n        });\r\n      });\r\n\r\n      // 加载道路网络\r\n      this.loadRoadNetwork();\r\n\r\n      // 添加地图点击事件\r\n      this.map.on('click', this.handleMapClick);\r\n    },\r\n\r\n    async loadRoadNetwork() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8081/roads');\r\n        this.drawRoads(response.data.roads);\r\n      } catch (error) {\r\n        console.error('加载道路数据失败:', error);\r\n      }\r\n    },\r\n\r\n    drawRoads(roads) {\r\n      roads.forEach(road => {\r\n        if (road.coordinates.length >= 2) {\r\n          const coordinates = road.coordinates.map(coord => [coord.lat, coord.lng]);\r\n          L.polyline(coordinates, {\r\n            color: '#ccc',\r\n            weight: 2,\r\n            opacity: 0.5\r\n          }).addTo(this.map);\r\n        }\r\n      });\r\n    },\r\n\r\n    handleMapClick(e) {\r\n      const latlng = e.latlng;\r\n\r\n      if (!this.startPoint) {\r\n        this.setStartPoint(latlng);\r\n      } else if (!this.endPoint) {\r\n        this.setEndPoint(latlng);\r\n      }\r\n    },\r\n\r\n    setStartPoint(latlng) {\r\n      this.startPoint = latlng;\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      this.startMarker = L.marker(latlng, {\r\n        icon: L.divIcon({\r\n          className: 'custom-marker',\r\n          html: '<div class=\"marker-start\">起点</div>'\r\n        })\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    setEndPoint(latlng) {\r\n      this.endPoint = latlng;\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      this.endMarker = L.marker(latlng, {\r\n        icon: L.divIcon({\r\n          className: 'custom-marker',\r\n          html: '<div class=\"marker-end\">终点</div>'\r\n        })\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    async findShortestPath() {\r\n      if (!this.startPoint || !this.endPoint) {\r\n        return;\r\n      }\r\n\r\n      this.loading = true;\r\n      try {\r\n        const response = await axios.post('http://localhost:8081/find_path', {\r\n          startLat: this.startPoint.lat,\r\n          startLon: this.startPoint.lng,\r\n          endLat: this.endPoint.lat,\r\n          endLon: this.endPoint.lng\r\n        });\r\n\r\n        if (response.data.success) {\r\n          this.clearRoute();\r\n          this.drawRoute(response.data);\r\n          this.routeInfo = response.data;\r\n        } else {\r\n          alert('未找到有效路径');\r\n        }\r\n      } catch (error) {\r\n        console.error('查找路径失败:', error);\r\n        alert('路径查找失败，请稍后重试');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    drawRoute(routeData) {\r\n      const coordinates = routeData.coordinates.map(coord => [coord.lat, coord.lng]);\r\n      this.pathLayer = L.polyline(coordinates, {\r\n        color: '#2196F3',\r\n        weight: 5,\r\n        opacity: 0.7\r\n      }).addTo(this.map);\r\n\r\n      routeData.steps.forEach((step, index) => {\r\n        if (step.instruction) {\r\n          const marker = L.marker([step.lat, step.lng], {\r\n            icon: L.divIcon({\r\n              className: 'navigation-marker',\r\n              html: `<div class=\"step-marker\">${index + 1}</div>`\r\n            })\r\n          })\r\n              .bindPopup(\r\n                  `<div class=\"step-popup\">\r\n              <b>${step.instruction}</b><br>\r\n              距离: ${(step.distance).toFixed(0)}米<br>\r\n              预计时间: ${Math.round(step.duration)}秒\r\n            </div>`\r\n              )\r\n              .addTo(this.map);\r\n\r\n          this.navigationMarkers.push(marker);\r\n        }\r\n      });\r\n\r\n      this.map.fitBounds(this.pathLayer.getBounds(), {\r\n        padding: [50, 50]\r\n      });\r\n    },\r\n\r\n    clearRoute() {\r\n      if (this.pathLayer) {\r\n        this.map.removeLayer(this.pathLayer);\r\n      }\r\n      this.navigationMarkers.forEach(marker => {\r\n        this.map.removeLayer(marker);\r\n      });\r\n      this.navigationMarkers = [];\r\n      this.routeInfo = null;\r\n    },\r\n\r\n    resetPoints() {\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      this.clearRoute();\r\n      this.startPoint = null;\r\n      this.endPoint = null;\r\n      this.startMarker = null;\r\n      this.endMarker = null;\r\n    },\r\n\r\n    formatCoordinate(point) {\r\n      return `纬度: ${point.lat.toFixed(6)}, 经度: ${point.lng.toFixed(6)}`;\r\n    },\r\n\r\n    resizeMap() {\r\n      this.$nextTick(() => {\r\n        this.map?.invalidateSize();\r\n      });\r\n    },\r\n\r\n    async searchLocation() {\r\n      if (!this.searchQuery) return;\r\n\r\n      this.geocoder.getLocation(this.searchQuery, (status, result) => {\r\n        if (status === 'complete' && result.info === 'OK') {\r\n          const location = result.geocodes[0].location;\r\n          console.log('搜索结果:', location);\r\n\r\n          // 设置起点或终点\r\n          this.setStartPoint(location); // 或者使用 setEndPoint 如果需要设置为终点\r\n        } else {\r\n          console.error('搜索失败:', result);\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}