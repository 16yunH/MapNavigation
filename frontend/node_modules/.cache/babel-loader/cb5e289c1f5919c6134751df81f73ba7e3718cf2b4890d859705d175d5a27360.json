{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      map: null,\n      startId: null,\n      goalId: null,\n      pathLayer: null,\n      nodes: {}\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('http://localhost:8081/nodes');\n      this.nodes = response.data;\n    } catch (error) {\n      console.error('Error fetching nodes:', error);\n    }\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(this.$refs.map).fitBounds([[28.2817100, 117.1911600], [28.3225200, 117.2551900]]);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors',\n        maxZoom: 18\n      }).addTo(this.map);\n    },\n    async findShortestPath() {\n      if (!this.startId || !this.goalId) {\n        alert('Please enter both start and goal node IDs.');\n        return;\n      }\n      try {\n        const response = await axios.post('http://localhost:8081/shortest_path', {\n          startId: this.startId,\n          goalId: this.goalId\n        });\n        if (this.pathLayer) {\n          this.map.removeLayer(this.pathLayer);\n        }\n        const path = response.data.path;\n        this.pathLayer = L.polyline(path.map(nodeId => {\n          const node = this.nodes[nodeId];\n          return [node.lat, node.lon];\n        })).addTo(this.map);\n        this.map.fitBounds(this.pathLayer.getBounds());\n      } catch (error) {\n        console.error('Error finding shortest path:', error);\n        alert('An error occurred while finding the shortest path. Please check the console for details.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["L","axios","data","map","startId","goalId","pathLayer","nodes","created","response","get","error","console","mounted","initMap","methods","$refs","fitBounds","tileLayer","attribution","maxZoom","addTo","findShortestPath","alert","post","removeLayer","path","polyline","nodeId","node","lat","lon","getBounds"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapView.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <div class=\"controls\">\r\n      <input type=\"number\" v-model.number=\"startId\" placeholder=\"Enter start node ID\">\r\n      <input type=\"number\" v-model.number=\"goalId\" placeholder=\"Enter goal node ID\">\r\n      <button @click=\"findShortestPath\">Find Shortest Path</button>\r\n    </div>\r\n    <div class=\"map\" ref=\"map\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      map: null,\r\n      startId: null,\r\n      goalId: null,\r\n      pathLayer: null,\r\n      nodes: {},\r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      const response = await axios.get('http://localhost:8081/nodes');\r\n      this.nodes = response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching nodes:', error);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map(this.$refs.map).fitBounds([\r\n        [28.2817100, 117.1911600],\r\n        [28.3225200, 117.2551900],\r\n      ]);\r\n\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors',\r\n        maxZoom: 18,\r\n      }).addTo(this.map);\r\n    },\r\n    async findShortestPath() {\r\n      if (!this.startId || !this.goalId) {\r\n        alert('Please enter both start and goal node IDs.');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post('http://localhost:8081/shortest_path', {\r\n          startId: this.startId,\r\n          goalId: this.goalId,\r\n        });\r\n\r\n        if (this.pathLayer) {\r\n          this.map.removeLayer(this.pathLayer);\r\n        }\r\n\r\n        const path = response.data.path;\r\n\r\n        this.pathLayer = L.polyline(path.map(nodeId => {\r\n          const node = this.nodes[nodeId];\r\n          return [node.lat, node.lon];\r\n        })).addTo(this.map);\r\n\r\n        this.map.fitBounds(this.pathLayer.getBounds());\r\n      } catch (error) {\r\n        console.error('Error finding shortest path:', error);\r\n        alert('An error occurred while finding the shortest path. Please check the console for details.');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.map-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n}\r\n\r\n.map {\r\n  flex: 1;\r\n}\r\n\r\n.controls {\r\n  padding: 10px;\r\n}\r\n</style>"],"mappings":";AAYA,OAAOA,CAAA,MAAO,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,OAAO,EAAE,IAAI;MACbC,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE,CAAC;IACV,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,MAAMC,QAAO,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAC,6BAA6B,CAAC;MAC/D,IAAI,CAACH,KAAI,GAAIE,QAAQ,CAACP,IAAI;IAC5B,EAAE,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;EAChB,CAAC;EACDC,OAAO,EAAE;IACPD,OAAOA,CAAA,EAAG;MACR,IAAI,CAACX,GAAE,GAAIH,CAAC,CAACG,GAAG,CAAC,IAAI,CAACa,KAAK,CAACb,GAAG,CAAC,CAACc,SAAS,CAAC,CACzC,CAAC,UAAU,EAAE,WAAW,CAAC,EACzB,CAAC,UAAU,EAAE,WAAW,CAAC,CAC1B,CAAC;MAEFjB,CAAC,CAACkB,SAAS,CAAC,oDAAoD,EAAE;QAChEC,WAAW,EAAE,yFAAyF;QACtGC,OAAO,EAAE;MACX,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAClB,GAAG,CAAC;IACpB,CAAC;IACD,MAAMmB,gBAAgBA,CAAA,EAAG;MACvB,IAAI,CAAC,IAAI,CAAClB,OAAM,IAAK,CAAC,IAAI,CAACC,MAAM,EAAE;QACjCkB,KAAK,CAAC,4CAA4C,CAAC;QACnD;MACF;MAEA,IAAI;QACF,MAAMd,QAAO,GAAI,MAAMR,KAAK,CAACuB,IAAI,CAAC,qCAAqC,EAAE;UACvEpB,OAAO,EAAE,IAAI,CAACA,OAAO;UACrBC,MAAM,EAAE,IAAI,CAACA;QACf,CAAC,CAAC;QAEF,IAAI,IAAI,CAACC,SAAS,EAAE;UAClB,IAAI,CAACH,GAAG,CAACsB,WAAW,CAAC,IAAI,CAACnB,SAAS,CAAC;QACtC;QAEA,MAAMoB,IAAG,GAAIjB,QAAQ,CAACP,IAAI,CAACwB,IAAI;QAE/B,IAAI,CAACpB,SAAQ,GAAIN,CAAC,CAAC2B,QAAQ,CAACD,IAAI,CAACvB,GAAG,CAACyB,MAAK,IAAK;UAC7C,MAAMC,IAAG,GAAI,IAAI,CAACtB,KAAK,CAACqB,MAAM,CAAC;UAC/B,OAAO,CAACC,IAAI,CAACC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC;QAC7B,CAAC,CAAC,CAAC,CAACV,KAAK,CAAC,IAAI,CAAClB,GAAG,CAAC;QAEnB,IAAI,CAACA,GAAG,CAACc,SAAS,CAAC,IAAI,CAACX,SAAS,CAAC0B,SAAS,CAAC,CAAC,CAAC;MAChD,EAAE,OAAOrB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDY,KAAK,CAAC,0FAA0F,CAAC;MACnG;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}