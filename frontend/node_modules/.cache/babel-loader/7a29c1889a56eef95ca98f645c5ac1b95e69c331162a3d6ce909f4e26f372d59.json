{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios';\nexport default {\n  name: 'MapNavigation',\n  data() {\n    return {\n      map: null,\n      // Leaflet地图实例\n      pathLayer: null,\n      // 路径图层\n      startPoint: null,\n      // 起点坐标\n      endPoint: null,\n      // 终点坐标\n      startMarker: null,\n      // 起点标记\n      endMarker: null,\n      // 终点标记\n      routeInfo: null,\n      // 路径信息\n      navigationMarkers: [],\n      // 导航标记数组\n      loading: false,\n      // 加载状态\n      startSearch: '',\n      endSearch: '',\n      startSuggestions: [],\n      endSuggestions: [],\n      amapKey: 'b44c18bdc514de170db976d407902980'\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.resizeMap();\n    // 监听窗口大小变化，确保地图正确显示\n    window.addEventListener('resize', this.resizeMap);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.resizeMap);\n  },\n  methods: {\n    // 在 methods 对象中添加以下方法：\n    outOfChina(lat, lng) {\n      // 检查坐标是否在中国境内\n      if (lng < 72.004 || lng > 137.8347) {\n        return true;\n      }\n      if (lat < 0.8293 || lat > 55.8271) {\n        return true;\n      }\n      return false;\n    },\n    transformLat(x, y) {\n      // 纬度转换算法\n      const PI = 3.14159265358979324;\n      let ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x));\n      ret += (20.0 * Math.sin(6.0 * x * PI) + 20.0 * Math.sin(2.0 * x * PI)) * 2.0 / 3.0;\n      ret += (20.0 * Math.sin(y * PI) + 40.0 * Math.sin(y / 3.0 * PI)) * 2.0 / 3.0;\n      ret += (160.0 * Math.sin(y / 12.0 * PI) + 320 * Math.sin(y * PI / 30.0)) * 2.0 / 3.0;\n      return ret;\n    },\n    transformLng(x, y) {\n      // 经度转换算法\n      const PI = 3.14159265358979324;\n      let ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x));\n      ret += (20.0 * Math.sin(6.0 * x * PI) + 20.0 * Math.sin(2.0 * x * PI)) * 2.0 / 3.0;\n      ret += (20.0 * Math.sin(x * PI) + 40.0 * Math.sin(x / 3.0 * PI)) * 2.0 / 3.0;\n      ret += (150.0 * Math.sin(x / 12.0 * PI) + 300.0 * Math.sin(x / 30.0 * PI)) * 2.0 / 3.0;\n      return ret;\n    },\n    gcj02ToWGS84(lat, lng) {\n      // GCJ-02 坐标转 WGS-84 坐标\n      if (this.outOfChina(lat, lng)) {\n        return {\n          lat,\n          lng\n        };\n      }\n      const PI = 3.14159265358979324;\n      let dLat = this.transformLat(lng - 105.0, lat - 35.0);\n      let dLng = this.transformLng(lng - 105.0, lat - 35.0);\n      let radLat = lat / 180.0 * PI;\n      let magic = Math.sin(radLat);\n      magic = 1 - 0.00669342162296594323 * magic * magic;\n      let sqrtMagic = Math.sqrt(magic);\n      dLat = dLat * 180.0 / (6378245.0 * (1 - 0.00669342162296594323) / (magic * sqrtMagic) * PI);\n      dLng = dLng * 180.0 / (6378245.0 / sqrtMagic * Math.cos(radLat) * PI);\n      return {\n        lat: lat - dLat,\n        lng: lng - dLng\n      };\n    },\n    // 初始化地图\n    initMap() {\n      this.map = L.map(this.$refs.map).setView([28.3021, 117.2232], 13);\n\n      // 添加地图图层\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n        maxZoom: 19\n      }).addTo(this.map);\n\n      // 加载道路网络\n      this.loadRoadNetwork();\n\n      // 添加地图点击事件\n      this.map.on('click', this.handleMapClick);\n    },\n    // 加载道路网络数据\n    async loadRoadNetwork() {\n      try {\n        const response = await axios.get('http://localhost:8081/roads');\n        this.drawRoads(response.data.roads);\n      } catch (error) {\n        console.error('加载道路数据失败:', error);\n      }\n    },\n    // 绘制道路网络\n    drawRoads(roads) {\n      roads.forEach(road => {\n        if (road.coordinates.length >= 2) {\n          const coordinates = road.coordinates.map(coord => [coord.lat, coord.lng]);\n          L.polyline(coordinates, {\n            color: '#ccc',\n            weight: 2,\n            opacity: 0.5\n          }).addTo(this.map);\n        }\n      });\n    },\n    async handleStartSearchInput() {\n      if (this.startSearch.length > 1) {\n        await this.fetchSuggestions(this.startSearch, 'start');\n      } else {\n        this.startSuggestions = [];\n      }\n    },\n    async handleEndSearchInput() {\n      if (this.endSearch.length > 1) {\n        await this.fetchSuggestions(this.endSearch, 'end');\n      } else {\n        this.endSuggestions = [];\n      }\n    },\n    async fetchSuggestions(keyword, type) {\n      try {\n        const response = await axios.get(`https://restapi.amap.com/v3/assistant/inputtips`, {\n          params: {\n            keywords: keyword,\n            key: this.amapKey,\n            city: '鹰潭',\n            location: '117.069202,28.260189',\n            datatype: 'all'\n          }\n        });\n        if (response.data.status === '1') {\n          const suggestions = response.data.tips.map(tip => ({\n            id: tip.id,\n            name: tip.name,\n            location: tip.location\n          }));\n          if (type === 'start') {\n            this.startSuggestions = suggestions;\n          } else {\n            this.endSuggestions = suggestions;\n          }\n        }\n      } catch (error) {\n        console.error('获取位置建议失败:', error);\n      }\n    },\n    async selectStartLocation(suggestion) {\n      const [gcjLng, gcjLat] = suggestion.location.split(',').map(Number);\n      const wgsCoords = this.gcj02ToWGS84(gcjLat, gcjLng);\n      this.setStartPoint(wgsCoords);\n      this.startSearch = suggestion.name;\n      this.startSuggestions = [];\n    },\n    async selectEndLocation(suggestion) {\n      const [gcjLng, gcjLat] = suggestion.location.split(',').map(Number);\n      const wgsCoords = this.gcj02ToWGS84(gcjLat, gcjLng);\n      this.setEndPoint(wgsCoords);\n      this.endSearch = suggestion.name;\n      this.endSuggestions = [];\n    },\n    // 处理地图点击事件\n    handleMapClick(e) {\n      const latlng = e.latlng;\n      if (!this.startPoint) {\n        this.setStartPoint(latlng);\n      } else if (!this.endPoint) {\n        this.setEndPoint(latlng);\n      }\n    },\n    // 设置起点\n    setStartPoint(latlng) {\n      this.startPoint = latlng;\n      if (this.startMarker) {\n        this.map.removeLayer(this.startMarker);\n      }\n      this.startMarker = L.marker(latlng, {\n        icon: L.divIcon({\n          className: 'custom-marker',\n          html: '<div class=\"marker-start\">起点</div>'\n        })\n      }).addTo(this.map);\n    },\n    // 设置终点\n    setEndPoint(latlng) {\n      this.endPoint = latlng;\n      if (this.endMarker) {\n        this.map.removeLayer(this.endMarker);\n      }\n      this.endMarker = L.marker(latlng, {\n        icon: L.divIcon({\n          className: 'custom-marker',\n          html: '<div class=\"marker-end\">终点</div>'\n        })\n      }).addTo(this.map);\n    },\n    // 查找最短路径\n    async findShortestPath() {\n      if (!this.startPoint || !this.endPoint) {\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await axios.post('http://localhost:8081/find_path', {\n          startLat: this.startPoint.lat,\n          startLon: this.startPoint.lng,\n          endLat: this.endPoint.lat,\n          endLon: this.endPoint.lng\n        });\n        if (response.data.success) {\n          this.clearRoute();\n          this.drawRoute(response.data);\n          this.routeInfo = response.data;\n        } else {\n          alert('未找到有效路径');\n        }\n      } catch (error) {\n        console.error('查找路径失败:', error);\n        alert('路径查找失败，请稍后重试');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 绘制路径\n    drawRoute(routeData) {\n      // 绘制路径线\n      const coordinates = routeData.coordinates.map(coord => [coord.lat, coord.lng]);\n      this.pathLayer = L.polyline(coordinates, {\n        color: '#2196F3',\n        weight: 5,\n        opacity: 0.7\n      }).addTo(this.map);\n\n      // 添加导航点标记\n      routeData.steps.forEach((step, index) => {\n        if (step.instruction) {\n          const marker = L.marker([step.lat, step.lng], {\n            icon: L.divIcon({\n              className: 'navigation-marker',\n              html: `<div class=\"step-marker\">${index + 1}</div>`\n            })\n          }).bindPopup(`<div class=\"step-popup\">\n              <b>${step.instruction}</b><br>\n              距离: ${step.distance.toFixed(0)}米<br>\n              预计时间: ${Math.round(step.duration)}秒\n            </div>`).addTo(this.map);\n          this.navigationMarkers.push(marker);\n        }\n      });\n\n      // 调整地图视图以显示整个路径\n      this.map.fitBounds(this.pathLayer.getBounds(), {\n        padding: [50, 50]\n      });\n    },\n    // 清除路径\n    clearRoute() {\n      if (this.pathLayer) {\n        this.map.removeLayer(this.pathLayer);\n      }\n      this.navigationMarkers.forEach(marker => {\n        this.map.removeLayer(marker);\n      });\n      this.navigationMarkers = [];\n      this.routeInfo = null;\n    },\n    // 重置所有点\n    resetPoints() {\n      if (this.startMarker) {\n        this.map.removeLayer(this.startMarker);\n      }\n      if (this.endMarker) {\n        this.map.removeLayer(this.endMarker);\n      }\n      this.clearRoute();\n      this.startPoint = null;\n      this.endPoint = null;\n      this.startMarker = null;\n      this.endMarker = null;\n    },\n    // 格式化坐标显示\n    formatCoordinate(point) {\n      return `纬度: ${point.lat.toFixed(6)}, 经度: ${point.lng.toFixed(6)}`;\n    },\n    // 调整地图大小\n    resizeMap() {\n      this.$nextTick(() => {\n        this.map?.invalidateSize();\n      });\n    }\n  }\n};","map":{"version":3,"names":["L","axios","name","data","map","pathLayer","startPoint","endPoint","startMarker","endMarker","routeInfo","navigationMarkers","loading","startSearch","endSearch","startSuggestions","endSuggestions","amapKey","mounted","initMap","resizeMap","window","addEventListener","beforeUnmount","removeEventListener","methods","outOfChina","lat","lng","transformLat","x","y","PI","ret","Math","sqrt","abs","sin","transformLng","gcj02ToWGS84","dLat","dLng","radLat","magic","sqrtMagic","cos","$refs","setView","tileLayer","attribution","maxZoom","addTo","loadRoadNetwork","on","handleMapClick","response","get","drawRoads","roads","error","console","forEach","road","coordinates","length","coord","polyline","color","weight","opacity","handleStartSearchInput","fetchSuggestions","handleEndSearchInput","keyword","type","params","keywords","key","city","location","datatype","status","suggestions","tips","tip","id","selectStartLocation","suggestion","gcjLng","gcjLat","split","Number","wgsCoords","setStartPoint","selectEndLocation","setEndPoint","e","latlng","removeLayer","marker","icon","divIcon","className","html","findShortestPath","post","startLat","startLon","endLat","endLon","success","clearRoute","drawRoute","alert","routeData","steps","step","index","instruction","bindPopup","distance","toFixed","round","duration","push","fitBounds","getBounds","padding","resetPoints","formatCoordinate","point","$nextTick","invalidateSize"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapView.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <div class=\"search-panel\">\r\n      <!-- 起点搜索 -->\r\n      <div class=\"search-box\">\r\n        <input\r\n            v-model=\"startSearch\"\r\n            @input=\"handleStartSearchInput\"\r\n            placeholder=\"输入起点...\"\r\n            class=\"search-input\"\r\n        />\r\n        <div v-if=\"startSuggestions.length\" class=\"suggestions-container\">\r\n          <div\r\n              v-for=\"suggestion in startSuggestions\"\r\n              :key=\"suggestion.id\"\r\n              @click=\"selectStartLocation(suggestion)\"\r\n              class=\"suggestion-item\"\r\n          >\r\n            {{ suggestion.name }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 终点搜索 -->\r\n      <div class=\"search-box\">\r\n        <input\r\n            v-model=\"endSearch\"\r\n            @input=\"handleEndSearchInput\"\r\n            placeholder=\"输入终点...\"\r\n            class=\"search-input\"\r\n        />\r\n        <div v-if=\"endSuggestions.length\" class=\"suggestions-container\">\r\n          <div\r\n              v-for=\"suggestion in endSuggestions\"\r\n              :key=\"suggestion.id\"\r\n              @click=\"selectEndLocation(suggestion)\"\r\n              class=\"suggestion-item\"\r\n          >\r\n            {{ suggestion.name }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- 控制面板 -->\r\n    <div class=\"controls\">\r\n      <!-- 起点和终点信息显示 -->\r\n      <div v-if=\"startPoint\" class=\"coordinate-info\">\r\n        起点: {{ formatCoordinate(startPoint) }}\r\n      </div>\r\n      <div v-if=\"endPoint\" class=\"coordinate-info\">\r\n        终点: {{ formatCoordinate(endPoint) }}\r\n      </div>\r\n\r\n      <!-- 操作按钮 -->\r\n      <button\r\n          v-if=\"startPoint && endPoint\"\r\n          @click=\"findShortestPath\"\r\n          class=\"action-button\"\r\n      >\r\n        查找最短路径\r\n      </button>\r\n      <button\r\n          @click=\"resetPoints\"\r\n          class=\"action-button\"\r\n      >\r\n        重置选择点\r\n      </button>\r\n\r\n      <!-- 操作说明 -->\r\n      <div class=\"instruction-panel\" v-if=\"!startPoint || !endPoint\">\r\n        {{ !startPoint ? '请点击地图选择起点' : '请点击地图选择终点' }}\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 地图容器 -->\r\n    <div class=\"map\" ref=\"map\"></div>\r\n\r\n    <!-- 路径信息面板 -->\r\n    <div v-if=\"routeInfo\" class=\"route-info-panel\">\r\n      <h3>路径信息</h3>\r\n      <div class=\"route-summary\">\r\n        <div>总距离: {{ (routeInfo.totalDistance/1000).toFixed(2) }}公里</div>\r\n        <div>预计用时: {{ Math.round(routeInfo.totalDuration/60) }}分钟</div>\r\n      </div>\r\n      <div class=\"route-steps\">\r\n        <h4>导航步骤:</h4>\r\n        <ol>\r\n          <li v-for=\"(step, index) in routeInfo.steps\" :key=\"index\">\r\n            {{ step.instruction }}\r\n            <div class=\"step-details\">\r\n              {{ (step.distance).toFixed(0) }}米 |\r\n              {{ Math.round(step.duration) }}秒\r\n            </div>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'MapNavigation',\r\n\r\n  data() {\r\n    return {\r\n      map: null,             // Leaflet地图实例\r\n      pathLayer: null,       // 路径图层\r\n      startPoint: null,      // 起点坐标\r\n      endPoint: null,        // 终点坐标\r\n      startMarker: null,     // 起点标记\r\n      endMarker: null,       // 终点标记\r\n      routeInfo: null,       // 路径信息\r\n      navigationMarkers: [], // 导航标记数组\r\n      loading: false,         // 加载状态\r\n      startSearch: '',\r\n      endSearch: '',\r\n      startSuggestions: [],\r\n      endSuggestions: [],\r\n      amapKey: 'b44c18bdc514de170db976d407902980'\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.initMap();\r\n    this.resizeMap();\r\n    // 监听窗口大小变化，确保地图正确显示\r\n    window.addEventListener('resize', this.resizeMap);\r\n  },\r\n\r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.resizeMap);\r\n  },\r\n\r\n  methods: {\r\n    // 在 methods 对象中添加以下方法：\r\n    outOfChina(lat, lng) {\r\n      // 检查坐标是否在中国境内\r\n      if (lng < 72.004 || lng > 137.8347) {\r\n        return true;\r\n      }\r\n      if (lat < 0.8293 || lat > 55.8271) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    transformLat(x, y) {\r\n      // 纬度转换算法\r\n      const PI = 3.14159265358979324;\r\n      let ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x));\r\n      ret += (20.0 * Math.sin(6.0 * x * PI) + 20.0 * Math.sin(2.0 * x * PI)) * 2.0 / 3.0;\r\n      ret += (20.0 * Math.sin(y * PI) + 40.0 * Math.sin(y / 3.0 * PI)) * 2.0 / 3.0;\r\n      ret += (160.0 * Math.sin(y / 12.0 * PI) + 320 * Math.sin(y * PI / 30.0)) * 2.0 / 3.0;\r\n      return ret;\r\n    },\r\n\r\n    transformLng(x, y) {\r\n      // 经度转换算法\r\n      const PI = 3.14159265358979324;\r\n      let ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x));\r\n      ret += (20.0 * Math.sin(6.0 * x * PI) + 20.0 * Math.sin(2.0 * x * PI)) * 2.0 / 3.0;\r\n      ret += (20.0 * Math.sin(x * PI) + 40.0 * Math.sin(x / 3.0 * PI)) * 2.0 / 3.0;\r\n      ret += (150.0 * Math.sin(x / 12.0 * PI) + 300.0 * Math.sin(x / 30.0 * PI)) * 2.0 / 3.0;\r\n      return ret;\r\n    },\r\n\r\n    gcj02ToWGS84(lat, lng) {\r\n      // GCJ-02 坐标转 WGS-84 坐标\r\n      if (this.outOfChina(lat, lng)) {\r\n        return { lat, lng };\r\n      }\r\n\r\n      const PI = 3.14159265358979324;\r\n      let dLat = this.transformLat(lng - 105.0, lat - 35.0);\r\n      let dLng = this.transformLng(lng - 105.0, lat - 35.0);\r\n      let radLat = lat / 180.0 * PI;\r\n      let magic = Math.sin(radLat);\r\n      magic = 1 - 0.00669342162296594323 * magic * magic;\r\n      let sqrtMagic = Math.sqrt(magic);\r\n      dLat = (dLat * 180.0) / ((6378245.0 * (1 - 0.00669342162296594323)) / (magic * sqrtMagic) * PI);\r\n      dLng = (dLng * 180.0) / (6378245.0 / sqrtMagic * Math.cos(radLat) * PI);\r\n\r\n      return {\r\n        lat: lat - dLat,\r\n        lng: lng - dLng\r\n      };\r\n    },\r\n    // 初始化地图\r\n    initMap() {\r\n      this.map = L.map(this.$refs.map).setView([28.3021, 117.2232], 13);\r\n\r\n      // 添加地图图层\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '© OpenStreetMap contributors',\r\n        maxZoom: 19\r\n      }).addTo(this.map);\r\n\r\n      // 加载道路网络\r\n      this.loadRoadNetwork();\r\n\r\n      // 添加地图点击事件\r\n      this.map.on('click', this.handleMapClick);\r\n    },\r\n\r\n    // 加载道路网络数据\r\n    async loadRoadNetwork() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8081/roads');\r\n        this.drawRoads(response.data.roads);\r\n      } catch (error) {\r\n        console.error('加载道路数据失败:', error);\r\n      }\r\n    },\r\n\r\n    // 绘制道路网络\r\n    drawRoads(roads) {\r\n      roads.forEach(road => {\r\n        if (road.coordinates.length >= 2) {\r\n          const coordinates = road.coordinates.map(coord => [coord.lat, coord.lng]);\r\n          L.polyline(coordinates, {\r\n            color: '#ccc',\r\n            weight: 2,\r\n            opacity: 0.5\r\n          }).addTo(this.map);\r\n        }\r\n      });\r\n    },\r\n\r\n    async handleStartSearchInput() {\r\n      if (this.startSearch.length > 1) {\r\n        await this.fetchSuggestions(this.startSearch, 'start');\r\n      } else {\r\n        this.startSuggestions = [];\r\n      }\r\n    },\r\n\r\n    async handleEndSearchInput() {\r\n      if (this.endSearch.length > 1) {\r\n        await this.fetchSuggestions(this.endSearch, 'end');\r\n      } else {\r\n        this.endSuggestions = [];\r\n      }\r\n    },\r\n\r\n    async fetchSuggestions(keyword, type) {\r\n      try {\r\n        const response = await axios.get(`https://restapi.amap.com/v3/assistant/inputtips`, {\r\n          params: {\r\n            keywords: keyword,\r\n            key: this.amapKey,\r\n            city: '鹰潭',\r\n            location: '117.069202,28.260189',\r\n            datatype: 'all',\r\n          }\r\n        });\r\n\r\n        if (response.data.status === '1') {\r\n          const suggestions = response.data.tips.map(tip => ({\r\n            id: tip.id,\r\n            name: tip.name,\r\n            location: tip.location\r\n          }));\r\n\r\n          if (type === 'start') {\r\n            this.startSuggestions = suggestions;\r\n          } else {\r\n            this.endSuggestions = suggestions;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('获取位置建议失败:', error);\r\n      }\r\n    },\r\n\r\n    async selectStartLocation(suggestion) {\r\n      const [gcjLng, gcjLat] = suggestion.location.split(',').map(Number);\r\n      const wgsCoords = this.gcj02ToWGS84(gcjLat, gcjLng);\r\n      this.setStartPoint(wgsCoords);\r\n      this.startSearch = suggestion.name;\r\n      this.startSuggestions = [];\r\n    },\r\n\r\n    async selectEndLocation(suggestion) {\r\n      const [gcjLng, gcjLat] = suggestion.location.split(',').map(Number);\r\n      const wgsCoords = this.gcj02ToWGS84(gcjLat, gcjLng);\r\n      this.setEndPoint(wgsCoords);\r\n      this.endSearch = suggestion.name;\r\n      this.endSuggestions = [];\r\n    },\r\n\r\n    // 处理地图点击事件\r\n    handleMapClick(e) {\r\n      const latlng = e.latlng;\r\n\r\n      if (!this.startPoint) {\r\n        this.setStartPoint(latlng);\r\n      } else if (!this.endPoint) {\r\n        this.setEndPoint(latlng);\r\n      }\r\n    },\r\n\r\n    // 设置起点\r\n    setStartPoint(latlng) {\r\n      this.startPoint = latlng;\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      this.startMarker = L.marker(latlng, {\r\n        icon: L.divIcon({\r\n          className: 'custom-marker',\r\n          html: '<div class=\"marker-start\">起点</div>'\r\n        })\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    // 设置终点\r\n    setEndPoint(latlng) {\r\n      this.endPoint = latlng;\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      this.endMarker = L.marker(latlng, {\r\n        icon: L.divIcon({\r\n          className: 'custom-marker',\r\n          html: '<div class=\"marker-end\">终点</div>'\r\n        })\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    // 查找最短路径\r\n    async findShortestPath() {\r\n      if (!this.startPoint || !this.endPoint) {\r\n        return;\r\n      }\r\n\r\n      this.loading = true;\r\n      try {\r\n        const response = await axios.post('http://localhost:8081/find_path', {\r\n          startLat: this.startPoint.lat,\r\n          startLon: this.startPoint.lng,\r\n          endLat: this.endPoint.lat,\r\n          endLon: this.endPoint.lng\r\n        });\r\n\r\n        if (response.data.success) {\r\n          this.clearRoute();\r\n          this.drawRoute(response.data);\r\n          this.routeInfo = response.data;\r\n        } else {\r\n          alert('未找到有效路径');\r\n        }\r\n      } catch (error) {\r\n        console.error('查找路径失败:', error);\r\n        alert('路径查找失败，请稍后重试');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    // 绘制路径\r\n    drawRoute(routeData) {\r\n      // 绘制路径线\r\n      const coordinates = routeData.coordinates.map(coord => [coord.lat, coord.lng]);\r\n      this.pathLayer = L.polyline(coordinates, {\r\n        color: '#2196F3',\r\n        weight: 5,\r\n        opacity: 0.7\r\n      }).addTo(this.map);\r\n\r\n      // 添加导航点标记\r\n      routeData.steps.forEach((step, index) => {\r\n        if (step.instruction) {\r\n          const marker = L.marker([step.lat, step.lng], {\r\n            icon: L.divIcon({\r\n              className: 'navigation-marker',\r\n              html: `<div class=\"step-marker\">${index + 1}</div>`\r\n            })\r\n          })\r\n              .bindPopup(\r\n                  `<div class=\"step-popup\">\r\n              <b>${step.instruction}</b><br>\r\n              距离: ${(step.distance).toFixed(0)}米<br>\r\n              预计时间: ${Math.round(step.duration)}秒\r\n            </div>`\r\n              )\r\n              .addTo(this.map);\r\n\r\n          this.navigationMarkers.push(marker);\r\n        }\r\n      });\r\n\r\n      // 调整地图视图以显示整个路径\r\n      this.map.fitBounds(this.pathLayer.getBounds(), {\r\n        padding: [50, 50]\r\n      });\r\n    },\r\n\r\n    // 清除路径\r\n    clearRoute() {\r\n      if (this.pathLayer) {\r\n        this.map.removeLayer(this.pathLayer);\r\n      }\r\n      this.navigationMarkers.forEach(marker => {\r\n        this.map.removeLayer(marker);\r\n      });\r\n      this.navigationMarkers = [];\r\n      this.routeInfo = null;\r\n    },\r\n\r\n    // 重置所有点\r\n    resetPoints() {\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      this.clearRoute();\r\n      this.startPoint = null;\r\n      this.endPoint = null;\r\n      this.startMarker = null;\r\n      this.endMarker = null;\r\n    },\r\n\r\n    // 格式化坐标显示\r\n    formatCoordinate(point) {\r\n      return `纬度: ${point.lat.toFixed(6)}, 经度: ${point.lng.toFixed(6)}`;\r\n    },\r\n\r\n    // 调整地图大小\r\n    resizeMap() {\r\n      this.$nextTick(() => {\r\n        this.map?.invalidateSize();\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.map-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  position: relative;\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.map {\r\n  flex: 1;\r\n  z-index: 1;\r\n}\r\n\r\n.controls {\r\n  position: absolute;\r\n  top: 120px;\r\n  left: 10px;\r\n  z-index: 100;\r\n}\r\n\r\n.coordinate-info {\r\n  margin: 5px 0;\r\n  font-size: 14px;\r\n  color: #333;\r\n}\r\n\r\n.action-button {\r\n  margin: 5px;\r\n  padding: 8px 16px;\r\n  background-color: #2196F3;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #1976D2;\r\n}\r\n\r\n.marker-start {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 12px 12px;\r\n  border-radius: 10px;\r\n  font-size: 14px;\r\n  box-shadow: 0 2px 4px rgba(0.2,0,0,0.2);\r\n}\r\n\r\n.marker-end {\r\n  background-color: #f44336;\r\n  color: white;\r\n  padding: 12px 12px;\r\n  border-radius: 6px;\r\n  font-size: 14px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n}\r\n\r\n.step-marker {\r\n  background-color: #2196F3;\r\n  color: white;\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 12px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n}\r\n\r\n.route-info-panel {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  background-color: white;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  max-width: 300px;\r\n  max-height: 70vh;\r\n  overflow-y: auto;\r\n  z-index: 2;\r\n}\r\n\r\n.route-summary {\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  background-color: #f5f5f5;\r\n  border-radius: 4px;\r\n}\r\n\r\n.route-steps {\r\n  margin-top: 10px;\r\n}\r\n\r\n.route-steps ol {\r\n  padding-left: 20px;\r\n}\r\n\r\n.route-steps li {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.step-details {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-top: 4px;\r\n}\r\n\r\n.step-popup {\r\n  padding: 5px;\r\n  min-width: 200px;\r\n}\r\n\r\n.instruction-panel {\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  background-color: #e3f2fd;\r\n  border-radius: 4px;\r\n  color: #1976D2;\r\n  font-size: 14px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .route-info-panel {\r\n    max-width: 100%;\r\n    top: auto;\r\n    bottom: 0;\r\n    right: 0;\r\n    left: 0;\r\n    max-height: 40vh;\r\n    border-radius: 8px 8px 0 0;\r\n  }\r\n}\r\n@media (max-width: 768px) {\r\n  .search-panel {\r\n    width: calc(100% - 20px);\r\n  }\r\n}\r\n.search-panel {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  z-index: 1000;\r\n  background: white;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n  width: 300px;\r\n}\r\n\r\n.search-box {\r\n  position: relative;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.suggestions-container {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n  background: white;\r\n  border: 1px solid #ddd;\r\n  border-top: none;\r\n  border-radius: 0 0 4px 4px;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  z-index: 1001;\r\n}\r\n\r\n.suggestion-item {\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.suggestion-item:hover {\r\n  background-color: #f5f5f5;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}