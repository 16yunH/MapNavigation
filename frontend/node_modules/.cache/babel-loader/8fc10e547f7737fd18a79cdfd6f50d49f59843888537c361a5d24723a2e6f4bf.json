{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios';\nexport default {\n  name: 'MapNavigation',\n  data() {\n    return {\n      // 地图相关数据\n      map: null,\n      // Leaflet地图实例\n      pathLayer: null,\n      // 路径图层\n      startPoint: null,\n      // 起点坐标\n      endPoint: null,\n      // 终点坐标\n      startMarker: null,\n      // 起点标记\n      endMarker: null,\n      // 终点标记\n      routeInfo: null,\n      // 路径信息\n      navigationMarkers: [],\n      // 导航标记数组\n      loading: false,\n      // 加载状态\n\n      // 搜索相关数据\n      startLocationQuery: '',\n      // 起点搜索关键词\n      endLocationQuery: '',\n      // 终点搜索关键词\n      startSearchSuggestions: [],\n      // 起点搜索建议\n      endSearchSuggestions: [],\n      // 终点搜索建议\n      isStartSearchActive: false,\n      // 起点搜索框激活状态\n      isEndSearchActive: false,\n      // 终点搜索框激活状态\n      searchTimeout: null,\n      // 搜索防抖定时器\n\n      // 高德地图API配置\n      amapKey: '您的高德地图API Key' // 替换为实际的API Key\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.resizeMap();\n    // 监听窗口大小变化\n    window.addEventListener('resize', this.resizeMap);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.resizeMap);\n  },\n  methods: {\n    // 初始化地图\n    initMap() {\n      // 创建地图实例并设置初始视图\n      this.map = L.map(this.$refs.map).setView([28.3021, 117.2232], 13);\n\n      // 添加OpenStreetMap图层\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n        maxZoom: 19\n      }).addTo(this.map);\n\n      // 加载道路网络\n      this.loadRoadNetwork();\n\n      // 添加地图点击事件监听器\n      this.map.on('click', this.handleMapClick);\n    },\n    // 加载道路网络数据\n    async loadRoadNetwork() {\n      try {\n        const response = await axios.get('http://localhost:8081/roads');\n        this.drawRoads(response.data.roads);\n      } catch (error) {\n        console.error('加载道路数据失败:', error);\n        // 可以添加用户提示\n        alert('道路数据加载失败，请刷新页面重试');\n      }\n    },\n    // 绘制道路网络\n    drawRoads(roads) {\n      roads.forEach(road => {\n        if (road.coordinates.length >= 2) {\n          const coordinates = road.coordinates.map(coord => [coord.lat, coord.lng]);\n          L.polyline(coordinates, {\n            color: '#ccc',\n            weight: 2,\n            opacity: 0.5\n          }).addTo(this.map);\n        }\n      });\n    },\n    // 处理地图点击事件\n    handleMapClick(e) {\n      const latlng = e.latlng;\n      if (!this.startPoint) {\n        this.setStartPoint(latlng);\n      } else if (!this.endPoint) {\n        this.setEndPoint(latlng);\n      }\n    },\n    // 处理起点位置搜索\n    async handleStartLocationSearch() {\n      clearTimeout(this.searchTimeout);\n      this.searchTimeout = setTimeout(() => {\n        this.searchLocation(this.startLocationQuery, 'start');\n      }, 300); // 300ms防抖\n    },\n    // 处理终点位置搜索\n    async handleEndLocationSearch() {\n      clearTimeout(this.searchTimeout);\n      this.searchTimeout = setTimeout(() => {\n        this.searchLocation(this.endLocationQuery, 'end');\n      }, 300); // 300ms防抖\n    },\n    // 搜索位置API调用\n    async searchLocation(query, type) {\n      if (!query.trim()) {\n        if (type === 'start') {\n          this.startSearchSuggestions = [];\n        } else {\n          this.endSearchSuggestions = [];\n        }\n        return;\n      }\n      try {\n        const response = await axios.get(`https://restapi.amap.com/v3/assistant/inputtips`, {\n          params: {\n            keywords: query,\n            key: this.amapKey,\n            city: '全国',\n            output: 'JSON'\n          }\n        });\n        if (response.data.status === '1' && response.data.tips) {\n          const suggestions = response.data.tips.filter(tip => tip.location) // 只保留有经纬度信息的建议\n          .map(tip => ({\n            id: tip.id || Math.random().toString(),\n            name: tip.name,\n            district: tip.district,\n            location: tip.location\n          }));\n          if (type === 'start') {\n            this.startSearchSuggestions = suggestions;\n          } else {\n            this.endSearchSuggestions = suggestions;\n          }\n        }\n      } catch (error) {\n        console.error('位置搜索失败:', error);\n        // 可以添加用户提示\n        alert('位置搜索服务暂时不可用，请稍后重试');\n      }\n    },\n    // 处理起点选择\n    handleStartLocationSelect(suggestion) {\n      const [lng, lat] = suggestion.location.split(',').map(Number);\n      this.setStartPoint({\n        lat,\n        lng\n      });\n      this.startLocationQuery = suggestion.name;\n      this.startSearchSuggestions = [];\n      this.isStartSearchActive = false;\n    },\n    // 处理终点选择\n    handleEndLocationSelect(suggestion) {\n      const [lng, lat] = suggestion.location.split(',').map(Number);\n      this.setEndPoint({\n        lat,\n        lng\n      });\n      this.endLocationQuery = suggestion.name;\n      this.endSearchSuggestions = [];\n      this.isEndSearchActive = false;\n    },\n    // 处理搜索框失焦\n    handleSearchBlur(type) {\n      // 延迟关闭建议列表，确保可以点击选项\n      setTimeout(() => {\n        if (type === 'start') {\n          this.isStartSearchActive = false;\n        } else {\n          this.isEndSearchActive = false;\n        }\n      }, 200);\n    },\n    // 设置起点\n    setStartPoint(latlng) {\n      this.startPoint = latlng;\n      if (this.startMarker) {\n        this.map.removeLayer(this.startMarker);\n      }\n      this.startMarker = L.marker(latlng, {\n        icon: L.divIcon({\n          className: 'custom-marker',\n          html: '<div class=\"marker-start\">起点</div>'\n        })\n      }).addTo(this.map);\n    },\n    // 设置终点\n    setEndPoint(latlng) {\n      this.endPoint = latlng;\n      if (this.endMarker) {\n        this.map.removeLayer(this.endMarker);\n      }\n      this.endMarker = L.marker(latlng, {\n        icon: L.divIcon({\n          className: 'custom-marker',\n          html: '<div class=\"marker-end\">终点</div>'\n        })\n      }).addTo(this.map);\n    },\n    // 查找最短路径\n    async findShortestPath() {\n      if (!this.startPoint || !this.endPoint) {\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await axios.post('http://localhost:8081/find_path', {\n          startLat: this.startPoint.lat,\n          startLon: this.startPoint.lng,\n          endLat: this.endPoint.lat,\n          endLon: this.endPoint.lng\n        });\n        if (response.data.success) {\n          this.clearRoute();\n          this.drawRoute(response.data);\n          this.routeInfo = response.data;\n        } else {\n          alert('未找到有效路径，请尝试选择其他地点');\n        }\n      } catch (error) {\n        console.error('查找路径失败:', error);\n        alert('路径查找失败，请稍后重试');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 绘制路径\n    drawRoute(routeData) {\n      // 绘制路径线\n      const coordinates = routeData.coordinates.map(coord => [coord.lat, coord.lng]);\n      this.pathLayer = L.polyline(coordinates, {\n        color: '#2196F3',\n        weight: 5,\n        opacity: 0.7\n      }).addTo(this.map);\n\n      // 添加导航点标记\n      routeData.steps.forEach((step, index) => {\n        if (step.instruction) {\n          const marker = L.marker([step.lat, step.lng], {\n            icon: L.divIcon({\n              className: 'navigation-marker',\n              html: `<div class=\"step-marker\">${index + 1}</div>`\n            })\n          }).bindPopup(`<div class=\"step-popup\">\n              <b>${step.instruction}</b><br>\n              距离: ${step.distance.toFixed(0)}米<br>\n              预计时间: ${Math.round(step.duration / 60)}分钟\n            </div>`).addTo(this.map);\n          this.navigationMarkers.push(marker);\n        }\n      });\n\n      // 调整地图视图以显示整个路径\n      this.map.fitBounds(this.pathLayer.getBounds(), {\n        padding: [50, 50]\n      });\n    },\n    // 清除路径\n    clearRoute() {\n      if (this.pathLayer) {\n        this.map.removeLayer(this.pathLayer);\n      }\n      this.navigationMarkers.forEach(marker => {\n        this.map.removeLayer(marker);\n      });\n      // 清除路径（继续上一段代码）\n      this.navigationMarkers = [];\n      this.routeInfo = null;\n    },\n    // 重置所有点\n    resetPoints() {\n      if (this.startMarker) {\n        this.map.removeLayer(this.startMarker);\n      }\n      if (this.endMarker) {\n        this.map.removeLayer(this.endMarker);\n      }\n      this.clearRoute();\n      this.startPoint = null;\n      this.endPoint = null;\n      this.startMarker = null;\n      this.endMarker = null;\n      this.startLocationQuery = '';\n      this.endLocationQuery = '';\n      this.startSearchSuggestions = [];\n      this.endSearchSuggestions = [];\n    },\n    // 格式化坐标显示\n    formatCoordinate(point) {\n      return `纬度: ${point.lat.toFixed(6)}, 经度: ${point.lng.toFixed(6)}`;\n    },\n    // 调整地图大小\n    resizeMap() {\n      this.$nextTick(() => {\n        this.map?.invalidateSize();\n      });\n    }\n  }\n};","map":{"version":3,"names":["L","axios","name","data","map","pathLayer","startPoint","endPoint","startMarker","endMarker","routeInfo","navigationMarkers","loading","startLocationQuery","endLocationQuery","startSearchSuggestions","endSearchSuggestions","isStartSearchActive","isEndSearchActive","searchTimeout","amapKey","mounted","initMap","resizeMap","window","addEventListener","beforeUnmount","removeEventListener","methods","$refs","setView","tileLayer","attribution","maxZoom","addTo","loadRoadNetwork","on","handleMapClick","response","get","drawRoads","roads","error","console","alert","forEach","road","coordinates","length","coord","lat","lng","polyline","color","weight","opacity","e","latlng","setStartPoint","setEndPoint","handleStartLocationSearch","clearTimeout","setTimeout","searchLocation","handleEndLocationSearch","query","type","trim","params","keywords","key","city","output","status","tips","suggestions","filter","tip","location","id","Math","random","toString","district","handleStartLocationSelect","suggestion","split","Number","handleEndLocationSelect","handleSearchBlur","removeLayer","marker","icon","divIcon","className","html","findShortestPath","post","startLat","startLon","endLat","endLon","success","clearRoute","drawRoute","routeData","steps","step","index","instruction","bindPopup","distance","toFixed","round","duration","push","fitBounds","getBounds","padding","resetPoints","formatCoordinate","point","$nextTick","invalidateSize"],"sources":["D:\\3.code\\CLionProjects\\mapnavigation\\frontend\\src\\components\\mapView.vue"],"sourcesContent":["<template>\r\n  <div class=\"map-container\">\r\n    <!-- 控制面板：包含搜索和操作区域 -->\r\n    <div class=\"controls\">\r\n      <!-- 搜索区域：包含起点和终点搜索框 -->\r\n      <div class=\"search-container\">\r\n        <!-- 起点搜索框组件 -->\r\n        <div class=\"search-box\">\r\n          <input\r\n              v-model=\"startLocationQuery\"\r\n              @input=\"handleStartLocationSearch\"\r\n              @focus=\"isStartSearchActive = true\"\r\n              @blur=\"handleSearchBlur('start')\"\r\n              placeholder=\"请输入起点位置\"\r\n              class=\"location-input\"\r\n          />\r\n          <!-- 起点位置建议列表 -->\r\n          <div v-if=\"isStartSearchActive && startSearchSuggestions.length > 0\" class=\"suggestions-list\">\r\n            <div\r\n                v-for=\"suggestion in startSearchSuggestions\"\r\n                :key=\"suggestion.id\"\r\n                @click=\"handleStartLocationSelect(suggestion)\"\r\n                class=\"suggestion-item\"\r\n            >\r\n              {{ suggestion.name }}\r\n              <span class=\"suggestion-district\">{{ suggestion.district }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 终点搜索框组件 -->\r\n        <div class=\"search-box\">\r\n          <input\r\n              v-model=\"endLocationQuery\"\r\n              @input=\"handleEndLocationSearch\"\r\n              @focus=\"isEndSearchActive = true\"\r\n              @blur=\"handleSearchBlur('end')\"\r\n              placeholder=\"请输入终点位置\"\r\n              class=\"location-input\"\r\n          />\r\n          <!-- 终点位置建议列表 -->\r\n          <div v-if=\"isEndSearchActive && endSearchSuggestions.length > 0\" class=\"suggestions-list\">\r\n            <div\r\n                v-for=\"suggestion in endSearchSuggestions\"\r\n                :key=\"suggestion.id\"\r\n                @click=\"handleEndLocationSelect(suggestion)\"\r\n                class=\"suggestion-item\"\r\n            >\r\n              {{ suggestion.name }}\r\n              <span class=\"suggestion-district\">{{ suggestion.district }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 坐标信息显示区域 -->\r\n      <div v-if=\"startPoint\" class=\"coordinate-info\">\r\n        起点: {{ formatCoordinate(startPoint) }}\r\n      </div>\r\n      <div v-if=\"endPoint\" class=\"coordinate-info\">\r\n        终点: {{ formatCoordinate(endPoint) }}\r\n      </div>\r\n\r\n      <!-- 操作按钮区域 -->\r\n      <button\r\n          v-if=\"startPoint && endPoint\"\r\n          @click=\"findShortestPath\"\r\n          :disabled=\"loading\"\r\n          class=\"action-button\"\r\n      >\r\n        {{ loading ? '路径计算中...' : '查找最短路径' }}\r\n      </button>\r\n      <button\r\n          @click=\"resetPoints\"\r\n          :disabled=\"loading\"\r\n          class=\"action-button\"\r\n      >\r\n        重置选择点\r\n      </button>\r\n\r\n      <!-- 操作提示区域 -->\r\n      <div class=\"instruction-panel\" v-if=\"!startPoint || !endPoint\">\r\n        {{ !startPoint ? '请选择或搜索起点' : '请选择或搜索终点' }}\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 地图显示区域 -->\r\n    <div class=\"map\" ref=\"map\"></div>\r\n\r\n    <!-- 路径信息面板 -->\r\n    <div v-if=\"routeInfo\" class=\"route-info-panel\">\r\n      <h3>路径信息</h3>\r\n      <div class=\"route-summary\">\r\n        <div>总距离: {{ (routeInfo.totalDistance/1000).toFixed(2) }}公里</div>\r\n        <div>预计用时: {{ Math.round(routeInfo.totalDuration/60) }}分钟</div>\r\n      </div>\r\n      <div class=\"route-steps\">\r\n        <h4>导航步骤:</h4>\r\n        <ol>\r\n          <li v-for=\"(step, index) in routeInfo.steps\" :key=\"index\">\r\n            {{ step.instruction }}\r\n            <div class=\"step-details\">\r\n              {{ (step.distance).toFixed(0) }}米 |\r\n              {{ Math.round(step.duration/60) }}分钟\r\n            </div>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 加载提示遮罩 -->\r\n    <div v-if=\"loading\" class=\"loading-overlay\">\r\n      <div class=\"loading-spinner\"></div>\r\n      <div class=\"loading-text\">正在计算最佳路径...</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'MapNavigation',\r\n\r\n  data() {\r\n    return {\r\n      // 地图相关数据\r\n      map: null,                    // Leaflet地图实例\r\n      pathLayer: null,              // 路径图层\r\n      startPoint: null,             // 起点坐标\r\n      endPoint: null,               // 终点坐标\r\n      startMarker: null,            // 起点标记\r\n      endMarker: null,              // 终点标记\r\n      routeInfo: null,              // 路径信息\r\n      navigationMarkers: [],        // 导航标记数组\r\n      loading: false,               // 加载状态\r\n\r\n      // 搜索相关数据\r\n      startLocationQuery: '',       // 起点搜索关键词\r\n      endLocationQuery: '',         // 终点搜索关键词\r\n      startSearchSuggestions: [],   // 起点搜索建议\r\n      endSearchSuggestions: [],     // 终点搜索建议\r\n      isStartSearchActive: false,   // 起点搜索框激活状态\r\n      isEndSearchActive: false,     // 终点搜索框激活状态\r\n      searchTimeout: null,          // 搜索防抖定时器\r\n\r\n      // 高德地图API配置\r\n      amapKey: '您的高德地图API Key'  // 替换为实际的API Key\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.initMap();\r\n    this.resizeMap();\r\n    // 监听窗口大小变化\r\n    window.addEventListener('resize', this.resizeMap);\r\n  },\r\n\r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.resizeMap);\r\n  },\r\n\r\n  methods: {\r\n    // 初始化地图\r\n    initMap() {\r\n      // 创建地图实例并设置初始视图\r\n      this.map = L.map(this.$refs.map).setView([28.3021, 117.2232], 13);\r\n\r\n      // 添加OpenStreetMap图层\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '© OpenStreetMap contributors',\r\n        maxZoom: 19\r\n      }).addTo(this.map);\r\n\r\n      // 加载道路网络\r\n      this.loadRoadNetwork();\r\n\r\n      // 添加地图点击事件监听器\r\n      this.map.on('click', this.handleMapClick);\r\n    },\r\n\r\n    // 加载道路网络数据\r\n    async loadRoadNetwork() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8081/roads');\r\n        this.drawRoads(response.data.roads);\r\n      } catch (error) {\r\n        console.error('加载道路数据失败:', error);\r\n        // 可以添加用户提示\r\n        alert('道路数据加载失败，请刷新页面重试');\r\n      }\r\n    },\r\n\r\n    // 绘制道路网络\r\n    drawRoads(roads) {\r\n      roads.forEach(road => {\r\n        if (road.coordinates.length >= 2) {\r\n          const coordinates = road.coordinates.map(coord => [coord.lat, coord.lng]);\r\n          L.polyline(coordinates, {\r\n            color: '#ccc',\r\n            weight: 2,\r\n            opacity: 0.5\r\n          }).addTo(this.map);\r\n        }\r\n      });\r\n    },\r\n\r\n    // 处理地图点击事件\r\n    handleMapClick(e) {\r\n      const latlng = e.latlng;\r\n      if (!this.startPoint) {\r\n        this.setStartPoint(latlng);\r\n      } else if (!this.endPoint) {\r\n        this.setEndPoint(latlng);\r\n      }\r\n    },\r\n\r\n    // 处理起点位置搜索\r\n    async handleStartLocationSearch() {\r\n      clearTimeout(this.searchTimeout);\r\n      this.searchTimeout = setTimeout(() => {\r\n        this.searchLocation(this.startLocationQuery, 'start');\r\n      }, 300); // 300ms防抖\r\n    },\r\n\r\n    // 处理终点位置搜索\r\n    async handleEndLocationSearch() {\r\n      clearTimeout(this.searchTimeout);\r\n      this.searchTimeout = setTimeout(() => {\r\n        this.searchLocation(this.endLocationQuery, 'end');\r\n      }, 300); // 300ms防抖\r\n    },\r\n\r\n    // 搜索位置API调用\r\n    async searchLocation(query, type) {\r\n      if (!query.trim()) {\r\n        if (type === 'start') {\r\n          this.startSearchSuggestions = [];\r\n        } else {\r\n          this.endSearchSuggestions = [];\r\n        }\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get(\r\n            `https://restapi.amap.com/v3/assistant/inputtips`,\r\n            {\r\n              params: {\r\n                keywords: query,\r\n                key: this.amapKey,\r\n                city: '全国',\r\n                output: 'JSON'\r\n              }\r\n            }\r\n        );\r\n\r\n        if (response.data.status === '1' && response.data.tips) {\r\n          const suggestions = response.data.tips\r\n              .filter(tip => tip.location) // 只保留有经纬度信息的建议\r\n              .map(tip => ({\r\n                id: tip.id || Math.random().toString(),\r\n                name: tip.name,\r\n                district: tip.district,\r\n                location: tip.location\r\n              }));\r\n\r\n          if (type === 'start') {\r\n            this.startSearchSuggestions = suggestions;\r\n          } else {\r\n            this.endSearchSuggestions = suggestions;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('位置搜索失败:', error);\r\n        // 可以添加用户提示\r\n        alert('位置搜索服务暂时不可用，请稍后重试');\r\n      }\r\n    },\r\n\r\n    // 处理起点选择\r\n    handleStartLocationSelect(suggestion) {\r\n      const [lng, lat] = suggestion.location.split(',').map(Number);\r\n      this.setStartPoint({ lat, lng });\r\n      this.startLocationQuery = suggestion.name;\r\n      this.startSearchSuggestions = [];\r\n      this.isStartSearchActive = false;\r\n    },\r\n\r\n    // 处理终点选择\r\n    handleEndLocationSelect(suggestion) {\r\n      const [lng, lat] = suggestion.location.split(',').map(Number);\r\n      this.setEndPoint({ lat, lng });\r\n      this.endLocationQuery = suggestion.name;\r\n      this.endSearchSuggestions = [];\r\n      this.isEndSearchActive = false;\r\n    },\r\n\r\n    // 处理搜索框失焦\r\n    handleSearchBlur(type) {\r\n      // 延迟关闭建议列表，确保可以点击选项\r\n      setTimeout(() => {\r\n        if (type === 'start') {\r\n          this.isStartSearchActive = false;\r\n        } else {\r\n          this.isEndSearchActive = false;\r\n        }\r\n      }, 200);\r\n    },\r\n\r\n    // 设置起点\r\n    setStartPoint(latlng) {\r\n      this.startPoint = latlng;\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      this.startMarker = L.marker(latlng, {\r\n        icon: L.divIcon({\r\n          className: 'custom-marker',\r\n          html: '<div class=\"marker-start\">起点</div>'\r\n        })\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    // 设置终点\r\n    setEndPoint(latlng) {\r\n      this.endPoint = latlng;\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      this.endMarker = L.marker(latlng, {\r\n        icon: L.divIcon({\r\n          className: 'custom-marker',\r\n          html: '<div class=\"marker-end\">终点</div>'\r\n        })\r\n      }).addTo(this.map);\r\n    },\r\n\r\n    // 查找最短路径\r\n    async findShortestPath() {\r\n      if (!this.startPoint || !this.endPoint) {\r\n        return;\r\n      }\r\n\r\n      this.loading = true;\r\n      try {\r\n        const response = await axios.post('http://localhost:8081/find_path', {\r\n          startLat: this.startPoint.lat,\r\n          startLon: this.startPoint.lng,\r\n          endLat: this.endPoint.lat,\r\n          endLon: this.endPoint.lng\r\n        });\r\n\r\n        if (response.data.success) {\r\n          this.clearRoute();\r\n          this.drawRoute(response.data);\r\n          this.routeInfo = response.data;\r\n        } else {\r\n          alert('未找到有效路径，请尝试选择其他地点');\r\n        }\r\n      } catch (error) {\r\n        console.error('查找路径失败:', error);\r\n        alert('路径查找失败，请稍后重试');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    // 绘制路径\r\n    drawRoute(routeData) {\r\n      // 绘制路径线\r\n      const coordinates = routeData.coordinates.map(coord => [coord.lat, coord.lng]);\r\n      this.pathLayer = L.polyline(coordinates, {\r\n        color: '#2196F3',\r\n        weight: 5,\r\n        opacity: 0.7\r\n      }).addTo(this.map);\r\n\r\n      // 添加导航点标记\r\n      routeData.steps.forEach((step, index) => {\r\n        if (step.instruction) {\r\n          const marker = L.marker([step.lat, step.lng], {\r\n            icon: L.divIcon({\r\n              className: 'navigation-marker',\r\n              html: `<div class=\"step-marker\">${index + 1}</div>`\r\n            })\r\n          })\r\n              .bindPopup(\r\n                  `<div class=\"step-popup\">\r\n              <b>${step.instruction}</b><br>\r\n              距离: ${(step.distance).toFixed(0)}米<br>\r\n              预计时间: ${Math.round(step.duration/60)}分钟\r\n            </div>`\r\n              )\r\n              .addTo(this.map);\r\n\r\n          this.navigationMarkers.push(marker);\r\n        }\r\n      });\r\n\r\n      // 调整地图视图以显示整个路径\r\n      this.map.fitBounds(this.pathLayer.getBounds(), {\r\n        padding: [50, 50]\r\n      });\r\n    },\r\n\r\n    // 清除路径\r\n    clearRoute() {\r\n      if (this.pathLayer) {\r\n        this.map.removeLayer(this.pathLayer);\r\n      }\r\n      this.navigationMarkers.forEach(marker => {\r\n        this.map.removeLayer(marker);\r\n      });\r\n      // 清除路径（继续上一段代码）\r\n      this.navigationMarkers = [];\r\n      this.routeInfo = null;\r\n    },\r\n\r\n    // 重置所有点\r\n    resetPoints() {\r\n      if (this.startMarker) {\r\n        this.map.removeLayer(this.startMarker);\r\n      }\r\n      if (this.endMarker) {\r\n        this.map.removeLayer(this.endMarker);\r\n      }\r\n      this.clearRoute();\r\n      this.startPoint = null;\r\n      this.endPoint = null;\r\n      this.startMarker = null;\r\n      this.endMarker = null;\r\n      this.startLocationQuery = '';\r\n      this.endLocationQuery = '';\r\n      this.startSearchSuggestions = [];\r\n      this.endSearchSuggestions = [];\r\n    },\r\n\r\n    // 格式化坐标显示\r\n    formatCoordinate(point) {\r\n      return `纬度: ${point.lat.toFixed(6)}, 经度: ${point.lng.toFixed(6)}`;\r\n    },\r\n\r\n    // 调整地图大小\r\n    resizeMap() {\r\n      this.$nextTick(() => {\r\n        this.map?.invalidateSize();\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* 基础布局样式 */\r\n.map-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  position: relative;\r\n}\r\n\r\n.map {\r\n  flex: 1;\r\n  z-index: 1;\r\n}\r\n\r\n/* 控制面板样式 */\r\n.controls {\r\n  padding: 15px;\r\n  background-color: rgba(255, 255, 255, 0.95);\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.15);\r\n  z-index: 2;\r\n  border-radius: 8px;\r\n  margin: 10px;\r\n}\r\n\r\n/* 搜索区域样式 */\r\n.search-container {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.search-box {\r\n  position: relative;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.location-input {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  transition: border-color 0.3s;\r\n}\r\n\r\n.location-input:focus {\r\n  outline: none;\r\n  border-color: #2196F3;\r\n  box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.1);\r\n}\r\n\r\n/* 搜索建议列表样式 */\r\n.suggestions-list {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: white;\r\n  border: 1px solid #ddd;\r\n  border-top: none;\r\n  border-radius: 0 0 4px 4px;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  z-index: 1000;\r\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\r\n}\r\n\r\n.suggestion-item {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.suggestion-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.suggestion-item:hover {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.suggestion-district {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-left: 8px;\r\n}\r\n\r\n/* 坐标信息显示样式 */\r\n.coordinate-info {\r\n  margin: 5px 0;\r\n  padding: 8px;\r\n  font-size: 14px;\r\n  color: #333;\r\n  background-color: #f5f5f5;\r\n  border-radius: 4px;\r\n}\r\n\r\n/* 按钮样式 */\r\n.action-button {\r\n  margin: 5px;\r\n  padding: 8px 16px;\r\n  background-color: #2196F3;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  font-size: 14px;\r\n  min-width: 120px;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #1976D2;\r\n}\r\n\r\n.action-button:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* 标记点样式 */\r\n.marker-start {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 6px 12px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n  white-space: nowrap;\r\n}\r\n\r\n.marker-end {\r\n  background-color: #f44336;\r\n  color: white;\r\n  padding: 6px 12px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n  white-space: nowrap;\r\n}\r\n\r\n/* 导航标记样式 */\r\n.step-marker {\r\n  background-color: #2196F3;\r\n  color: white;\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 12px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n}\r\n\r\n/* 路径信息面板样式 */\r\n.route-info-panel {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  background-color: white;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  max-width: 300px;\r\n  max-height: 70vh;\r\n  overflow-y: auto;\r\n  z-index: 2;\r\n}\r\n\r\n.route-summary {\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  background-color: #f5f5f5;\r\n  border-radius: 4px;\r\n}\r\n\r\n.route-steps {\r\n  margin-top: 10px;\r\n}\r\n\r\n.route-steps ol {\r\n  padding-left: 20px;\r\n  margin: 0;\r\n}\r\n\r\n.route-steps li {\r\n  margin-bottom: 10px;\r\n  line-height: 1.4;\r\n}\r\n\r\n.step-details {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-top: 4px;\r\n}\r\n\r\n/* 弹出窗口样式 */\r\n.step-popup {\r\n  padding: 8px;\r\n  min-width: 200px;\r\n  line-height: 1.4;\r\n}\r\n\r\n/* 说明面板样式 */\r\n.instruction-panel {\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  background-color: #e3f2fd;\r\n  border-radius: 4px;\r\n  color: #1976D2;\r\n  font-size: 14px;\r\n  text-align: center;\r\n}\r\n\r\n/* 加载遮罩样式 */\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #2196F3;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.loading-text {\r\n  margin-top: 10px;\r\n  color: #333;\r\n  font-size: 14px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n/* 响应式布局样式 */\r\n@media (max-width: 768px) {\r\n  .route-info-panel {\r\n    max-width: 100%;\r\n    top: auto;\r\n    bottom: 0;\r\n    right: 0;\r\n    left: 0;\r\n    max-height: 40vh;\r\n    border-radius: 8px 8px 0 0;\r\n  }\r\n\r\n  .controls {\r\n    margin: 5px;\r\n    padding: 10px;\r\n  }\r\n\r\n  .action-button {\r\n    width: 100%;\r\n    margin: 5px 0;\r\n  }\r\n}\r\n</style>"],"mappings":";;;;;AAuHA,OAAOA,CAAA,MAAO,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,eAAe;EAErBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,GAAG,EAAE,IAAI;MAAqB;MAC9BC,SAAS,EAAE,IAAI;MAAe;MAC9BC,UAAU,EAAE,IAAI;MAAc;MAC9BC,QAAQ,EAAE,IAAI;MAAgB;MAC9BC,WAAW,EAAE,IAAI;MAAa;MAC9BC,SAAS,EAAE,IAAI;MAAe;MAC9BC,SAAS,EAAE,IAAI;MAAe;MAC9BC,iBAAiB,EAAE,EAAE;MAAS;MAC9BC,OAAO,EAAE,KAAK;MAAgB;;MAE9B;MACAC,kBAAkB,EAAE,EAAE;MAAQ;MAC9BC,gBAAgB,EAAE,EAAE;MAAU;MAC9BC,sBAAsB,EAAE,EAAE;MAAI;MAC9BC,oBAAoB,EAAE,EAAE;MAAM;MAC9BC,mBAAmB,EAAE,KAAK;MAAI;MAC9BC,iBAAiB,EAAE,KAAK;MAAM;MAC9BC,aAAa,EAAE,IAAI;MAAW;;MAE9B;MACAC,OAAO,EAAE,eAAc,CAAG;IAC5B,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;IACd,IAAI,CAACC,SAAS,CAAC,CAAC;IAChB;IACAC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACF,SAAS,CAAC;EACnD,CAAC;EAEDG,aAAaA,CAAA,EAAG;IACdF,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACJ,SAAS,CAAC;EACtD,CAAC;EAEDK,OAAO,EAAE;IACP;IACAN,OAAOA,CAAA,EAAG;MACR;MACA,IAAI,CAAClB,GAAE,GAAIJ,CAAC,CAACI,GAAG,CAAC,IAAI,CAACyB,KAAK,CAACzB,GAAG,CAAC,CAAC0B,OAAO,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC;;MAEjE;MACA9B,CAAC,CAAC+B,SAAS,CAAC,oDAAoD,EAAE;QAChEC,WAAW,EAAE,8BAA8B;QAC3CC,OAAO,EAAE;MACX,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC9B,GAAG,CAAC;;MAElB;MACA,IAAI,CAAC+B,eAAe,CAAC,CAAC;;MAEtB;MACA,IAAI,CAAC/B,GAAG,CAACgC,EAAE,CAAC,OAAO,EAAE,IAAI,CAACC,cAAc,CAAC;IAC3C,CAAC;IAED;IACA,MAAMF,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMrC,KAAK,CAACsC,GAAG,CAAC,6BAA6B,CAAC;QAC/D,IAAI,CAACC,SAAS,CAACF,QAAQ,CAACnC,IAAI,CAACsC,KAAK,CAAC;MACrC,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC;QACAE,KAAK,CAAC,kBAAkB,CAAC;MAC3B;IACF,CAAC;IAED;IACAJ,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACI,OAAO,CAACC,IAAG,IAAK;QACpB,IAAIA,IAAI,CAACC,WAAW,CAACC,MAAK,IAAK,CAAC,EAAE;UAChC,MAAMD,WAAU,GAAID,IAAI,CAACC,WAAW,CAAC3C,GAAG,CAAC6C,KAAI,IAAK,CAACA,KAAK,CAACC,GAAG,EAAED,KAAK,CAACE,GAAG,CAAC,CAAC;UACzEnD,CAAC,CAACoD,QAAQ,CAACL,WAAW,EAAE;YACtBM,KAAK,EAAE,MAAM;YACbC,MAAM,EAAE,CAAC;YACTC,OAAO,EAAE;UACX,CAAC,CAAC,CAACrB,KAAK,CAAC,IAAI,CAAC9B,GAAG,CAAC;QACpB;MACF,CAAC,CAAC;IACJ,CAAC;IAED;IACAiC,cAAcA,CAACmB,CAAC,EAAE;MAChB,MAAMC,MAAK,GAAID,CAAC,CAACC,MAAM;MACvB,IAAI,CAAC,IAAI,CAACnD,UAAU,EAAE;QACpB,IAAI,CAACoD,aAAa,CAACD,MAAM,CAAC;MAC5B,OAAO,IAAI,CAAC,IAAI,CAAClD,QAAQ,EAAE;QACzB,IAAI,CAACoD,WAAW,CAACF,MAAM,CAAC;MAC1B;IACF,CAAC;IAED;IACA,MAAMG,yBAAyBA,CAAA,EAAG;MAChCC,YAAY,CAAC,IAAI,CAAC1C,aAAa,CAAC;MAChC,IAAI,CAACA,aAAY,GAAI2C,UAAU,CAAC,MAAM;QACpC,IAAI,CAACC,cAAc,CAAC,IAAI,CAAClD,kBAAkB,EAAE,OAAO,CAAC;MACvD,CAAC,EAAE,GAAG,CAAC,EAAE;IACX,CAAC;IAED;IACA,MAAMmD,uBAAuBA,CAAA,EAAG;MAC9BH,YAAY,CAAC,IAAI,CAAC1C,aAAa,CAAC;MAChC,IAAI,CAACA,aAAY,GAAI2C,UAAU,CAAC,MAAM;QACpC,IAAI,CAACC,cAAc,CAAC,IAAI,CAACjD,gBAAgB,EAAE,KAAK,CAAC;MACnD,CAAC,EAAE,GAAG,CAAC,EAAE;IACX,CAAC;IAED;IACA,MAAMiD,cAAcA,CAACE,KAAK,EAAEC,IAAI,EAAE;MAChC,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC,CAAC,EAAE;QACjB,IAAID,IAAG,KAAM,OAAO,EAAE;UACpB,IAAI,CAACnD,sBAAqB,GAAI,EAAE;QAClC,OAAO;UACL,IAAI,CAACC,oBAAmB,GAAI,EAAE;QAChC;QACA;MACF;MAEA,IAAI;QACF,MAAMsB,QAAO,GAAI,MAAMrC,KAAK,CAACsC,GAAG,CAC5B,iDAAiD,EACjD;UACE6B,MAAM,EAAE;YACNC,QAAQ,EAAEJ,KAAK;YACfK,GAAG,EAAE,IAAI,CAAClD,OAAO;YACjBmD,IAAI,EAAE,IAAI;YACVC,MAAM,EAAE;UACV;QACF,CACJ,CAAC;QAED,IAAIlC,QAAQ,CAACnC,IAAI,CAACsE,MAAK,KAAM,GAAE,IAAKnC,QAAQ,CAACnC,IAAI,CAACuE,IAAI,EAAE;UACtD,MAAMC,WAAU,GAAIrC,QAAQ,CAACnC,IAAI,CAACuE,IAAG,CAChCE,MAAM,CAACC,GAAE,IAAKA,GAAG,CAACC,QAAQ,EAAE;UAAA,CAC5B1E,GAAG,CAACyE,GAAE,KAAM;YACXE,EAAE,EAAEF,GAAG,CAACE,EAAC,IAAKC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;YACtChF,IAAI,EAAE2E,GAAG,CAAC3E,IAAI;YACdiF,QAAQ,EAAEN,GAAG,CAACM,QAAQ;YACtBL,QAAQ,EAAED,GAAG,CAACC;UAChB,CAAC,CAAC,CAAC;UAEP,IAAIZ,IAAG,KAAM,OAAO,EAAE;YACpB,IAAI,CAACnD,sBAAqB,GAAI4D,WAAW;UAC3C,OAAO;YACL,IAAI,CAAC3D,oBAAmB,GAAI2D,WAAW;UACzC;QACF;MACF,EAAE,OAAOjC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAC/B;QACAE,KAAK,CAAC,mBAAmB,CAAC;MAC5B;IACF,CAAC;IAED;IACAwC,yBAAyBA,CAACC,UAAU,EAAE;MACpC,MAAM,CAAClC,GAAG,EAAED,GAAG,IAAImC,UAAU,CAACP,QAAQ,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAClF,GAAG,CAACmF,MAAM,CAAC;MAC7D,IAAI,CAAC7B,aAAa,CAAC;QAAER,GAAG;QAAEC;MAAI,CAAC,CAAC;MAChC,IAAI,CAACtC,kBAAiB,GAAIwE,UAAU,CAACnF,IAAI;MACzC,IAAI,CAACa,sBAAqB,GAAI,EAAE;MAChC,IAAI,CAACE,mBAAkB,GAAI,KAAK;IAClC,CAAC;IAED;IACAuE,uBAAuBA,CAACH,UAAU,EAAE;MAClC,MAAM,CAAClC,GAAG,EAAED,GAAG,IAAImC,UAAU,CAACP,QAAQ,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAClF,GAAG,CAACmF,MAAM,CAAC;MAC7D,IAAI,CAAC5B,WAAW,CAAC;QAAET,GAAG;QAAEC;MAAI,CAAC,CAAC;MAC9B,IAAI,CAACrC,gBAAe,GAAIuE,UAAU,CAACnF,IAAI;MACvC,IAAI,CAACc,oBAAmB,GAAI,EAAE;MAC9B,IAAI,CAACE,iBAAgB,GAAI,KAAK;IAChC,CAAC;IAED;IACAuE,gBAAgBA,CAACvB,IAAI,EAAE;MACrB;MACAJ,UAAU,CAAC,MAAM;QACf,IAAII,IAAG,KAAM,OAAO,EAAE;UACpB,IAAI,CAACjD,mBAAkB,GAAI,KAAK;QAClC,OAAO;UACL,IAAI,CAACC,iBAAgB,GAAI,KAAK;QAChC;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC;IAED;IACAwC,aAAaA,CAACD,MAAM,EAAE;MACpB,IAAI,CAACnD,UAAS,GAAImD,MAAM;MACxB,IAAI,IAAI,CAACjD,WAAW,EAAE;QACpB,IAAI,CAACJ,GAAG,CAACsF,WAAW,CAAC,IAAI,CAAClF,WAAW,CAAC;MACxC;MACA,IAAI,CAACA,WAAU,GAAIR,CAAC,CAAC2F,MAAM,CAAClC,MAAM,EAAE;QAClCmC,IAAI,EAAE5F,CAAC,CAAC6F,OAAO,CAAC;UACdC,SAAS,EAAE,eAAe;UAC1BC,IAAI,EAAE;QACR,CAAC;MACH,CAAC,CAAC,CAAC7D,KAAK,CAAC,IAAI,CAAC9B,GAAG,CAAC;IACpB,CAAC;IAED;IACAuD,WAAWA,CAACF,MAAM,EAAE;MAClB,IAAI,CAAClD,QAAO,GAAIkD,MAAM;MACtB,IAAI,IAAI,CAAChD,SAAS,EAAE;QAClB,IAAI,CAACL,GAAG,CAACsF,WAAW,CAAC,IAAI,CAACjF,SAAS,CAAC;MACtC;MACA,IAAI,CAACA,SAAQ,GAAIT,CAAC,CAAC2F,MAAM,CAAClC,MAAM,EAAE;QAChCmC,IAAI,EAAE5F,CAAC,CAAC6F,OAAO,CAAC;UACdC,SAAS,EAAE,eAAe;UAC1BC,IAAI,EAAE;QACR,CAAC;MACH,CAAC,CAAC,CAAC7D,KAAK,CAAC,IAAI,CAAC9B,GAAG,CAAC;IACpB,CAAC;IAED;IACA,MAAM4F,gBAAgBA,CAAA,EAAG;MACvB,IAAI,CAAC,IAAI,CAAC1F,UAAS,IAAK,CAAC,IAAI,CAACC,QAAQ,EAAE;QACtC;MACF;MAEA,IAAI,CAACK,OAAM,GAAI,IAAI;MACnB,IAAI;QACF,MAAM0B,QAAO,GAAI,MAAMrC,KAAK,CAACgG,IAAI,CAAC,iCAAiC,EAAE;UACnEC,QAAQ,EAAE,IAAI,CAAC5F,UAAU,CAAC4C,GAAG;UAC7BiD,QAAQ,EAAE,IAAI,CAAC7F,UAAU,CAAC6C,GAAG;UAC7BiD,MAAM,EAAE,IAAI,CAAC7F,QAAQ,CAAC2C,GAAG;UACzBmD,MAAM,EAAE,IAAI,CAAC9F,QAAQ,CAAC4C;QACxB,CAAC,CAAC;QAEF,IAAIb,QAAQ,CAACnC,IAAI,CAACmG,OAAO,EAAE;UACzB,IAAI,CAACC,UAAU,CAAC,CAAC;UACjB,IAAI,CAACC,SAAS,CAAClE,QAAQ,CAACnC,IAAI,CAAC;UAC7B,IAAI,CAACO,SAAQ,GAAI4B,QAAQ,CAACnC,IAAI;QAChC,OAAO;UACLyC,KAAK,CAAC,mBAAmB,CAAC;QAC5B;MACF,EAAE,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAC/BE,KAAK,CAAC,cAAc,CAAC;MACvB,UAAU;QACR,IAAI,CAAChC,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED;IACA4F,SAASA,CAACC,SAAS,EAAE;MACnB;MACA,MAAM1D,WAAU,GAAI0D,SAAS,CAAC1D,WAAW,CAAC3C,GAAG,CAAC6C,KAAI,IAAK,CAACA,KAAK,CAACC,GAAG,EAAED,KAAK,CAACE,GAAG,CAAC,CAAC;MAC9E,IAAI,CAAC9C,SAAQ,GAAIL,CAAC,CAACoD,QAAQ,CAACL,WAAW,EAAE;QACvCM,KAAK,EAAE,SAAS;QAChBC,MAAM,EAAE,CAAC;QACTC,OAAO,EAAE;MACX,CAAC,CAAC,CAACrB,KAAK,CAAC,IAAI,CAAC9B,GAAG,CAAC;;MAElB;MACAqG,SAAS,CAACC,KAAK,CAAC7D,OAAO,CAAC,CAAC8D,IAAI,EAAEC,KAAK,KAAK;QACvC,IAAID,IAAI,CAACE,WAAW,EAAE;UACpB,MAAMlB,MAAK,GAAI3F,CAAC,CAAC2F,MAAM,CAAC,CAACgB,IAAI,CAACzD,GAAG,EAAEyD,IAAI,CAACxD,GAAG,CAAC,EAAE;YAC5CyC,IAAI,EAAE5F,CAAC,CAAC6F,OAAO,CAAC;cACdC,SAAS,EAAE,mBAAmB;cAC9BC,IAAI,EAAE,4BAA4Ba,KAAI,GAAI,CAAC;YAC7C,CAAC;UACH,CAAC,EACIE,SAAS,CACN;mBACCH,IAAI,CAACE,WAAW;oBACdF,IAAI,CAACI,QAAQ,CAAEC,OAAO,CAAC,CAAC,CAAC;sBACxBhC,IAAI,CAACiC,KAAK,CAACN,IAAI,CAACO,QAAQ,GAAC,EAAE,CAAC;mBAEpC,EACChF,KAAK,CAAC,IAAI,CAAC9B,GAAG,CAAC;UAEpB,IAAI,CAACO,iBAAiB,CAACwG,IAAI,CAACxB,MAAM,CAAC;QACrC;MACF,CAAC,CAAC;;MAEF;MACA,IAAI,CAACvF,GAAG,CAACgH,SAAS,CAAC,IAAI,CAAC/G,SAAS,CAACgH,SAAS,CAAC,CAAC,EAAE;QAC7CC,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE;MAClB,CAAC,CAAC;IACJ,CAAC;IAED;IACAf,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAAClG,SAAS,EAAE;QAClB,IAAI,CAACD,GAAG,CAACsF,WAAW,CAAC,IAAI,CAACrF,SAAS,CAAC;MACtC;MACA,IAAI,CAACM,iBAAiB,CAACkC,OAAO,CAAC8C,MAAK,IAAK;QACvC,IAAI,CAACvF,GAAG,CAACsF,WAAW,CAACC,MAAM,CAAC;MAC9B,CAAC,CAAC;MACF;MACA,IAAI,CAAChF,iBAAgB,GAAI,EAAE;MAC3B,IAAI,CAACD,SAAQ,GAAI,IAAI;IACvB,CAAC;IAED;IACA6G,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAAC/G,WAAW,EAAE;QACpB,IAAI,CAACJ,GAAG,CAACsF,WAAW,CAAC,IAAI,CAAClF,WAAW,CAAC;MACxC;MACA,IAAI,IAAI,CAACC,SAAS,EAAE;QAClB,IAAI,CAACL,GAAG,CAACsF,WAAW,CAAC,IAAI,CAACjF,SAAS,CAAC;MACtC;MACA,IAAI,CAAC8F,UAAU,CAAC,CAAC;MACjB,IAAI,CAACjG,UAAS,GAAI,IAAI;MACtB,IAAI,CAACC,QAAO,GAAI,IAAI;MACpB,IAAI,CAACC,WAAU,GAAI,IAAI;MACvB,IAAI,CAACC,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACI,kBAAiB,GAAI,EAAE;MAC5B,IAAI,CAACC,gBAAe,GAAI,EAAE;MAC1B,IAAI,CAACC,sBAAqB,GAAI,EAAE;MAChC,IAAI,CAACC,oBAAmB,GAAI,EAAE;IAChC,CAAC;IAED;IACAwG,gBAAgBA,CAACC,KAAK,EAAE;MACtB,OAAO,OAAOA,KAAK,CAACvE,GAAG,CAAC8D,OAAO,CAAC,CAAC,CAAC,SAASS,KAAK,CAACtE,GAAG,CAAC6D,OAAO,CAAC,CAAC,CAAC,EAAE;IACnE,CAAC;IAED;IACAzF,SAASA,CAAA,EAAG;MACV,IAAI,CAACmG,SAAS,CAAC,MAAM;QACnB,IAAI,CAACtH,GAAG,EAAEuH,cAAc,CAAC,CAAC;MAC5B,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}